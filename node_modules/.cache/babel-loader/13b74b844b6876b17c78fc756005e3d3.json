{"ast":null,"code":"var _jsxFileName = \"E:\\\\D\\\\admin\\\\src\\\\utils\\\\demos\\\\autocomplete\\\\IntegrationAutosuggest.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Autosuggest from 'react-autosuggest';\nimport match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Popper from '@material-ui/core/Popper';\nimport { withStyles } from '@material-ui/core/styles';\nconst suggestions = [{\n  label: 'Afghanistan'\n}, {\n  label: 'Aland Islands'\n}, {\n  label: 'Albania'\n}, {\n  label: 'Algeria'\n}, {\n  label: 'American Samoa'\n}, {\n  label: 'Andorra'\n}, {\n  label: 'Angola'\n}, {\n  label: 'Anguilla'\n}, {\n  label: 'Antarctica'\n}, {\n  label: 'Antigua and Barbuda'\n}, {\n  label: 'Argentina'\n}, {\n  label: 'Armenia'\n}, {\n  label: 'Aruba'\n}, {\n  label: 'Australia'\n}, {\n  label: 'Austria'\n}, {\n  label: 'Azerbaijan'\n}, {\n  label: 'Bahamas'\n}, {\n  label: 'Bahrain'\n}, {\n  label: 'Bangladesh'\n}, {\n  label: 'Barbados'\n}, {\n  label: 'Belarus'\n}, {\n  label: 'Belgium'\n}, {\n  label: 'Belize'\n}, {\n  label: 'Benin'\n}, {\n  label: 'Bermuda'\n}, {\n  label: 'Bhutan'\n}, {\n  label: 'Bolivia, Plurinational State of'\n}, {\n  label: 'Bonaire, Sint Eustatius and Saba'\n}, {\n  label: 'Bosnia and Herzegovina'\n}, {\n  label: 'Botswana'\n}, {\n  label: 'Bouvet Island'\n}, {\n  label: 'Brazil'\n}, {\n  label: 'British Indian Ocean Territory'\n}, {\n  label: 'Brunei Darussalam'\n}];\n\nfunction renderInputComponent(inputProps) {\n  const {\n    classes,\n    inputRef = () => {},\n    ref,\n    ...other\n  } = inputProps;\n  return /*#__PURE__*/React.createElement(TextField, Object.assign({\n    fullWidth: true,\n    InputProps: {\n      inputRef: node => {\n        ref(node);\n        inputRef(node);\n      },\n      classes: {\n        input: classes.input\n      }\n    }\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }));\n}\n\nfunction renderSuggestion(suggestion, {\n  query,\n  isHighlighted\n}) {\n  const matches = match(suggestion.label, query);\n  const parts = parse(suggestion.label, matches);\n  return /*#__PURE__*/React.createElement(MenuItem, {\n    selected: isHighlighted,\n    component: \"div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, parts.map((part, index) => {\n    return part.highlight ? /*#__PURE__*/React.createElement(\"span\", {\n      key: String(index),\n      style: {\n        fontWeight: 500\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, part.text) : /*#__PURE__*/React.createElement(\"strong\", {\n      key: String(index),\n      style: {\n        fontWeight: 300\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, part.text);\n  })));\n}\n\nfunction getSuggestions(value) {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n  return inputLength === 0 ? [] : suggestions.filter(suggestion => {\n    const keep = count < 5 && suggestion.label.toLowerCase().slice(0, inputLength) === inputValue;\n\n    if (keep) {\n      count += 1;\n    }\n\n    return keep;\n  });\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.label;\n}\n\nconst styles = theme => ({\n  root: {\n    height: 250,\n    flexGrow: 1\n  },\n  container: {\n    position: 'relative'\n  },\n  suggestionsContainerOpen: {\n    position: 'absolute',\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0\n  },\n  suggestion: {\n    display: 'block'\n  },\n  suggestionsList: {\n    margin: 0,\n    padding: 0,\n    listStyleType: 'none'\n  },\n  divider: {\n    height: theme.spacing(1) * 2\n  }\n});\n\nclass IntegrationAutosuggest extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.popperNode = null;\n    this.state = {\n      single: '',\n      popper: '',\n      suggestions: []\n    };\n\n    this.handleSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.handleSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.handleChange = name => (event, {\n      newValue\n    }) => {\n      this.setState({\n        [name]: newValue\n      });\n    };\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    const autosuggestProps = {\n      renderInputComponent,\n      suggestions: this.state.suggestions,\n      onSuggestionsFetchRequested: this.handleSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.handleSuggestionsClearRequested,\n      getSuggestionValue,\n      renderSuggestion\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Autosuggest, Object.assign({}, autosuggestProps, {\n      inputProps: {\n        classes,\n        placeholder: 'Search a country (start with a)',\n        value: this.state.single,\n        onChange: this.handleChange('single')\n      },\n      theme: {\n        container: classes.container,\n        suggestionsContainerOpen: classes.suggestionsContainerOpen,\n        suggestionsList: classes.suggestionsList,\n        suggestion: classes.suggestion\n      },\n      renderSuggestionsContainer: options => /*#__PURE__*/React.createElement(Paper, Object.assign({}, options.containerProps, {\n        square: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }\n      }), options.children),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.divider,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Autosuggest, Object.assign({}, autosuggestProps, {\n      inputProps: {\n        classes,\n        label: 'Label',\n        placeholder: 'With Popper',\n        value: this.state.popper,\n        onChange: this.handleChange('popper'),\n        inputRef: node => {\n          this.popperNode = node;\n        },\n        InputLabelProps: {\n          shrink: true\n        }\n      },\n      theme: {\n        suggestionsList: classes.suggestionsList,\n        suggestion: classes.suggestion\n      },\n      renderSuggestionsContainer: options => /*#__PURE__*/React.createElement(Popper, {\n        anchorEl: this.popperNode,\n        open: Boolean(options.children),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Paper, Object.assign({\n        square: true\n      }, options.containerProps, {\n        style: {\n          width: this.popperNode ? this.popperNode.clientWidth : null\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 15\n        }\n      }), options.children)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nIntegrationAutosuggest.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(IntegrationAutosuggest);","map":{"version":3,"sources":["E:/D/admin/src/utils/demos/autocomplete/IntegrationAutosuggest.js"],"names":["React","PropTypes","Autosuggest","match","parse","TextField","Paper","MenuItem","Popper","withStyles","suggestions","label","renderInputComponent","inputProps","classes","inputRef","ref","other","node","input","renderSuggestion","suggestion","query","isHighlighted","matches","parts","map","part","index","highlight","String","fontWeight","text","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","count","filter","keep","slice","getSuggestionValue","styles","theme","root","height","flexGrow","container","position","suggestionsContainerOpen","zIndex","marginTop","spacing","left","right","display","suggestionsList","margin","padding","listStyleType","divider","IntegrationAutosuggest","Component","popperNode","state","single","popper","handleSuggestionsFetchRequested","setState","handleSuggestionsClearRequested","handleChange","name","event","newValue","render","props","autosuggestProps","onSuggestionsFetchRequested","onSuggestionsClearRequested","placeholder","onChange","options","containerProps","children","InputLabelProps","shrink","Boolean","width","clientWidth","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Autosuggest from 'react-autosuggest';\nimport match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Popper from '@material-ui/core/Popper';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst suggestions = [\n  { label: 'Afghanistan' },\n  { label: 'Aland Islands' },\n  { label: 'Albania' },\n  { label: 'Algeria' },\n  { label: 'American Samoa' },\n  { label: 'Andorra' },\n  { label: 'Angola' },\n  { label: 'Anguilla' },\n  { label: 'Antarctica' },\n  { label: 'Antigua and Barbuda' },\n  { label: 'Argentina' },\n  { label: 'Armenia' },\n  { label: 'Aruba' },\n  { label: 'Australia' },\n  { label: 'Austria' },\n  { label: 'Azerbaijan' },\n  { label: 'Bahamas' },\n  { label: 'Bahrain' },\n  { label: 'Bangladesh' },\n  { label: 'Barbados' },\n  { label: 'Belarus' },\n  { label: 'Belgium' },\n  { label: 'Belize' },\n  { label: 'Benin' },\n  { label: 'Bermuda' },\n  { label: 'Bhutan' },\n  { label: 'Bolivia, Plurinational State of' },\n  { label: 'Bonaire, Sint Eustatius and Saba' },\n  { label: 'Bosnia and Herzegovina' },\n  { label: 'Botswana' },\n  { label: 'Bouvet Island' },\n  { label: 'Brazil' },\n  { label: 'British Indian Ocean Territory' },\n  { label: 'Brunei Darussalam' },\n];\n\nfunction renderInputComponent(inputProps) {\n  const { classes, inputRef = () => {}, ref, ...other } = inputProps;\n\n  return (\n    <TextField\n      fullWidth\n      InputProps={{\n        inputRef: node => {\n          ref(node);\n          inputRef(node);\n        },\n        classes: {\n          input: classes.input,\n        },\n      }}\n      {...other}\n    />\n  );\n}\n\nfunction renderSuggestion(suggestion, { query, isHighlighted }) {\n  const matches = match(suggestion.label, query);\n  const parts = parse(suggestion.label, matches);\n\n  return (\n    <MenuItem selected={isHighlighted} component=\"div\">\n      <div>\n        {parts.map((part, index) => {\n          return part.highlight ? (\n            <span key={String(index)} style={{ fontWeight: 500 }}>\n              {part.text}\n            </span>\n          ) : (\n            <strong key={String(index)} style={{ fontWeight: 300 }}>\n              {part.text}\n            </strong>\n          );\n        })}\n      </div>\n    </MenuItem>\n  );\n}\n\nfunction getSuggestions(value) {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n\n  return inputLength === 0\n    ? []\n    : suggestions.filter(suggestion => {\n        const keep =\n          count < 5 && suggestion.label.toLowerCase().slice(0, inputLength) === inputValue;\n\n        if (keep) {\n          count += 1;\n        }\n\n        return keep;\n      });\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.label;\n}\n\nconst styles = theme => ({\n  root: {\n    height: 250,\n    flexGrow: 1,\n  },\n  container: {\n    position: 'relative',\n  },\n  suggestionsContainerOpen: {\n    position: 'absolute',\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0,\n  },\n  suggestion: {\n    display: 'block',\n  },\n  suggestionsList: {\n    margin: 0,\n    padding: 0,\n    listStyleType: 'none',\n  },\n  divider: {\n    height: theme.spacing(1) * 2,\n  },\n});\n\nclass IntegrationAutosuggest extends React.Component {\n  popperNode = null;\n\n  state = {\n    single: '',\n    popper: '',\n    suggestions: [],\n  };\n\n  handleSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value),\n    });\n  };\n\n  handleSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: [],\n    });\n  };\n\n  handleChange = name => (event, { newValue }) => {\n    this.setState({\n      [name]: newValue,\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    const autosuggestProps = {\n      renderInputComponent,\n      suggestions: this.state.suggestions,\n      onSuggestionsFetchRequested: this.handleSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.handleSuggestionsClearRequested,\n      getSuggestionValue,\n      renderSuggestion,\n    };\n\n    return (\n      <div className={classes.root}>\n        <Autosuggest\n          {...autosuggestProps}\n          inputProps={{\n            classes,\n            placeholder: 'Search a country (start with a)',\n            value: this.state.single,\n            onChange: this.handleChange('single'),\n          }}\n          theme={{\n            container: classes.container,\n            suggestionsContainerOpen: classes.suggestionsContainerOpen,\n            suggestionsList: classes.suggestionsList,\n            suggestion: classes.suggestion,\n          }}\n          renderSuggestionsContainer={options => (\n            <Paper {...options.containerProps} square>\n              {options.children}\n            </Paper>\n          )}\n        />\n        <div className={classes.divider} />\n        <Autosuggest\n          {...autosuggestProps}\n          inputProps={{\n            classes,\n            label: 'Label',\n            placeholder: 'With Popper',\n            value: this.state.popper,\n            onChange: this.handleChange('popper'),\n            inputRef: node => {\n              this.popperNode = node;\n            },\n            InputLabelProps: {\n              shrink: true,\n            },\n          }}\n          theme={{\n            suggestionsList: classes.suggestionsList,\n            suggestion: classes.suggestion,\n          }}\n          renderSuggestionsContainer={options => (\n            <Popper anchorEl={this.popperNode} open={Boolean(options.children)}>\n              <Paper\n                square\n                {...options.containerProps}\n                style={{ width: this.popperNode ? this.popperNode.clientWidth : null }}\n              >\n                {options.children}\n              </Paper>\n            </Popper>\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nIntegrationAutosuggest.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(IntegrationAutosuggest);\n"]},"metadata":{},"sourceType":"module"}