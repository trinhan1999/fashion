{"ast":null,"code":"var _jsxFileName = \"E:\\\\D\\\\admin\\\\src\\\\utils\\\\demos\\\\steppers\\\\HorizontalNonLinearStepper.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = theme => ({\n  root: {\n    width: '90%'\n  },\n  button: {\n    marginRight: theme.spacing(1)\n  },\n  completed: {\n    display: 'inline-block'\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  }\n});\n\nfunction getSteps() {\n  return ['Select campaign settings', 'Create an ad group', 'Create an ad'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return 'Step 1: Select campaign settings...';\n\n    case 1:\n      return 'Step 2: What is an ad group anyways?';\n\n    case 2:\n      return 'Step 3: This is the bit I really care about!';\n\n    default:\n      return 'Unknown step';\n  }\n}\n\nclass HorizontalNonLinearStepper extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      activeStep: 0,\n      completed: {}\n    };\n\n    this.totalSteps = () => {\n      return getSteps().length;\n    };\n\n    this.handleNext = () => {\n      let activeStep;\n\n      if (this.isLastStep() && !this.allStepsCompleted()) {\n        // It's the last step, but not all steps have been completed,\n        // find the first step that has been completed\n        const steps = getSteps();\n        activeStep = steps.findIndex((step, i) => !(i in this.state.completed));\n      } else {\n        activeStep = this.state.activeStep + 1;\n      }\n\n      this.setState({\n        activeStep\n      });\n    };\n\n    this.handleBack = () => {\n      const {\n        activeStep\n      } = this.state;\n      this.setState({\n        activeStep: activeStep - 1\n      });\n    };\n\n    this.handleStep = step => () => {\n      this.setState({\n        activeStep: step\n      });\n    };\n\n    this.handleComplete = () => {\n      const {\n        completed\n      } = this.state;\n      completed[this.state.activeStep] = true;\n      this.setState({\n        completed\n      });\n      this.handleNext();\n    };\n\n    this.handleReset = () => {\n      this.setState({\n        activeStep: 0,\n        completed: {}\n      });\n    };\n  }\n\n  completedSteps() {\n    return Object.keys(this.state.completed).length;\n  }\n\n  isLastStep() {\n    return this.state.activeStep === this.totalSteps() - 1;\n  }\n\n  allStepsCompleted() {\n    return this.completedSteps() === this.totalSteps();\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    const steps = getSteps();\n    const {\n      activeStep\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Stepper, {\n      nonLinear: true,\n      activeStep: activeStep,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }, steps.map((label, index) => {\n      return /*#__PURE__*/React.createElement(Step, {\n        key: label,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(StepButton, {\n        onClick: this.handleStep(index),\n        completed: this.state.completed[index],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }\n      }, label));\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }, this.allStepsCompleted() ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      className: classes.instructions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 15\n      }\n    }, \"All steps completed - you\\\"re finished\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleReset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 15\n      }\n    }, \"Reset\")) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      className: classes.instructions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 15\n      }\n    }, getStepContent(activeStep)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      disabled: activeStep === 0,\n      onClick: this.handleBack,\n      className: classes.button,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }\n    }, \"Back\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.handleNext,\n      className: classes.button,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }, \"Next\"), activeStep !== steps.length && (this.state.completed[this.state.activeStep] ? /*#__PURE__*/React.createElement(Typography, {\n      variant: \"caption\",\n      className: classes.completed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }\n    }, \"Step \", activeStep + 1, \" already completed\") : /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.handleComplete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }\n    }, this.completedSteps() === this.totalSteps() - 1 ? 'Finish' : 'Complete Step'))))));\n  }\n\n}\n\nHorizontalNonLinearStepper.propTypes = {\n  classes: PropTypes.object\n};\nexport default withStyles(styles)(HorizontalNonLinearStepper);","map":{"version":3,"sources":["E:/D/admin/src/utils/demos/steppers/HorizontalNonLinearStepper.js"],"names":["React","PropTypes","withStyles","Stepper","Step","StepButton","Button","Typography","styles","theme","root","width","button","marginRight","spacing","completed","display","instructions","marginTop","marginBottom","getSteps","getStepContent","step","HorizontalNonLinearStepper","Component","state","activeStep","totalSteps","length","handleNext","isLastStep","allStepsCompleted","steps","findIndex","i","setState","handleBack","handleStep","handleComplete","handleReset","completedSteps","Object","keys","render","classes","props","map","label","index","propTypes","object"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;;AAEA,MAAMC,MAAM,GAAGC,KAAK,KAAK;AACvBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE;AADH,GADiB;AAIvBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,WAAW,EAAEJ,KAAK,CAACK,OAAN,CAAc,CAAd;AADP,GAJe;AAOvBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,OAAO,EAAE;AADA,GAPY;AAUvBC,EAAAA,YAAY,EAAE;AACZC,IAAAA,SAAS,EAAET,KAAK,CAACK,OAAN,CAAc,CAAd,CADC;AAEZK,IAAAA,YAAY,EAAEV,KAAK,CAACK,OAAN,CAAc,CAAd;AAFF;AAVS,CAAL,CAApB;;AAgBA,SAASM,QAAT,GAAoB;AAClB,SAAO,CAAC,0BAAD,EAA6B,oBAA7B,EAAmD,cAAnD,CAAP;AACD;;AAED,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,UAAQA,IAAR;AACE,SAAK,CAAL;AACE,aAAO,qCAAP;;AACF,SAAK,CAAL;AACE,aAAO,sCAAP;;AACF,SAAK,CAAL;AACE,aAAO,8CAAP;;AACF;AACE,aAAO,cAAP;AARJ;AAUD;;AAED,MAAMC,0BAAN,SAAyCvB,KAAK,CAACwB,SAA/C,CAAyD;AAAA;AAAA;AAAA,SACvDC,KADuD,GAC/C;AACNC,MAAAA,UAAU,EAAE,CADN;AAENX,MAAAA,SAAS,EAAE;AAFL,KAD+C;;AAAA,SAMvDY,UANuD,GAM1C,MAAM;AACjB,aAAOP,QAAQ,GAAGQ,MAAlB;AACD,KARsD;;AAAA,SAUvDC,UAVuD,GAU1C,MAAM;AACjB,UAAIH,UAAJ;;AAEA,UAAI,KAAKI,UAAL,MAAqB,CAAC,KAAKC,iBAAL,EAA1B,EAAoD;AAClD;AACA;AACA,cAAMC,KAAK,GAAGZ,QAAQ,EAAtB;AACAM,QAAAA,UAAU,GAAGM,KAAK,CAACC,SAAN,CAAgB,CAACX,IAAD,EAAOY,CAAP,KAAa,EAAEA,CAAC,IAAI,KAAKT,KAAL,CAAWV,SAAlB,CAA7B,CAAb;AACD,OALD,MAKO;AACLW,QAAAA,UAAU,GAAG,KAAKD,KAAL,CAAWC,UAAX,GAAwB,CAArC;AACD;;AACD,WAAKS,QAAL,CAAc;AACZT,QAAAA;AADY,OAAd;AAGD,KAxBsD;;AAAA,SA0BvDU,UA1BuD,GA0B1C,MAAM;AACjB,YAAM;AAAEV,QAAAA;AAAF,UAAiB,KAAKD,KAA5B;AACA,WAAKU,QAAL,CAAc;AACZT,QAAAA,UAAU,EAAEA,UAAU,GAAG;AADb,OAAd;AAGD,KA/BsD;;AAAA,SAiCvDW,UAjCuD,GAiC1Cf,IAAI,IAAI,MAAM;AACzB,WAAKa,QAAL,CAAc;AACZT,QAAAA,UAAU,EAAEJ;AADA,OAAd;AAGD,KArCsD;;AAAA,SAuCvDgB,cAvCuD,GAuCtC,MAAM;AACrB,YAAM;AAAEvB,QAAAA;AAAF,UAAgB,KAAKU,KAA3B;AACAV,MAAAA,SAAS,CAAC,KAAKU,KAAL,CAAWC,UAAZ,CAAT,GAAmC,IAAnC;AACA,WAAKS,QAAL,CAAc;AACZpB,QAAAA;AADY,OAAd;AAGA,WAAKc,UAAL;AACD,KA9CsD;;AAAA,SAgDvDU,WAhDuD,GAgDzC,MAAM;AAClB,WAAKJ,QAAL,CAAc;AACZT,QAAAA,UAAU,EAAE,CADA;AAEZX,QAAAA,SAAS,EAAE;AAFC,OAAd;AAID,KArDsD;AAAA;;AAuDvDyB,EAAAA,cAAc,GAAG;AACf,WAAOC,MAAM,CAACC,IAAP,CAAY,KAAKjB,KAAL,CAAWV,SAAvB,EAAkCa,MAAzC;AACD;;AAEDE,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKL,KAAL,CAAWC,UAAX,KAA0B,KAAKC,UAAL,KAAoB,CAArD;AACD;;AAEDI,EAAAA,iBAAiB,GAAG;AAClB,WAAO,KAAKS,cAAL,OAA0B,KAAKb,UAAL,EAAjC;AACD;;AAEDgB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,UAAMb,KAAK,GAAGZ,QAAQ,EAAtB;AACA,UAAM;AAAEM,MAAAA;AAAF,QAAiB,KAAKD,KAA5B;AAEA,wBACE;AAAK,MAAA,SAAS,EAAEmB,OAAO,CAAClC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,OAAD;AAAS,MAAA,SAAS,MAAlB;AAAmB,MAAA,UAAU,EAAEgB,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGM,KAAK,CAACc,GAAN,CAAU,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC3B,0BACE,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAED,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,UAAD;AACE,QAAA,OAAO,EAAE,KAAKV,UAAL,CAAgBW,KAAhB,CADX;AAEE,QAAA,SAAS,EAAE,KAAKvB,KAAL,CAAWV,SAAX,CAAqBiC,KAArB,CAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIGD,KAJH,CADF,CADF;AAUD,KAXA,CADH,CADF,eAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKhB,iBAAL,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAEa,OAAO,CAAC3B,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDADF,eAIE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKsB,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJF,CADD,gBAQC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAEK,OAAO,CAAC3B,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8CI,cAAc,CAACK,UAAD,CAA5D,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,QAAQ,EAAEA,UAAU,KAAK,CAD3B;AAEE,MAAA,OAAO,EAAE,KAAKU,UAFhB;AAGE,MAAA,SAAS,EAAEQ,OAAO,CAAChC,MAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAQE,oBAAC,MAAD;AACE,MAAA,OAAO,EAAC,WADV;AAEE,MAAA,KAAK,EAAC,SAFR;AAGE,MAAA,OAAO,EAAE,KAAKiB,UAHhB;AAIE,MAAA,SAAS,EAAEe,OAAO,CAAChC,MAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARF,EAgBGc,UAAU,KAAKM,KAAK,CAACJ,MAArB,KACE,KAAKH,KAAL,CAAWV,SAAX,CAAqB,KAAKU,KAAL,CAAWC,UAAhC,iBACC,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,SAApB;AAA8B,MAAA,SAAS,EAAEkB,OAAO,CAAC7B,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACQW,UAAU,GAAG,CADrB,uBADD,gBAKC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,KAAK,EAAC,SAAlC;AAA4C,MAAA,OAAO,EAAE,KAAKY,cAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKE,cAAL,OAA0B,KAAKb,UAAL,KAAoB,CAA9C,GAAkD,QAAlD,GAA6D,eADhE,CANH,CAhBH,CAFF,CATJ,CAfF,CADF;AA2DD;;AAnIsD;;AAsIzDJ,0BAA0B,CAAC0B,SAA3B,GAAuC;AACrCL,EAAAA,OAAO,EAAE3C,SAAS,CAACiD;AADkB,CAAvC;AAIA,eAAehD,UAAU,CAACM,MAAD,CAAV,CAAmBe,0BAAnB,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = theme => ({\n  root: {\n    width: '90%',\n  },\n  button: {\n    marginRight: theme.spacing(1),\n  },\n  completed: {\n    display: 'inline-block',\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n});\n\nfunction getSteps() {\n  return ['Select campaign settings', 'Create an ad group', 'Create an ad'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return 'Step 1: Select campaign settings...';\n    case 1:\n      return 'Step 2: What is an ad group anyways?';\n    case 2:\n      return 'Step 3: This is the bit I really care about!';\n    default:\n      return 'Unknown step';\n  }\n}\n\nclass HorizontalNonLinearStepper extends React.Component {\n  state = {\n    activeStep: 0,\n    completed: {},\n  };\n\n  totalSteps = () => {\n    return getSteps().length;\n  };\n\n  handleNext = () => {\n    let activeStep;\n\n    if (this.isLastStep() && !this.allStepsCompleted()) {\n      // It's the last step, but not all steps have been completed,\n      // find the first step that has been completed\n      const steps = getSteps();\n      activeStep = steps.findIndex((step, i) => !(i in this.state.completed));\n    } else {\n      activeStep = this.state.activeStep + 1;\n    }\n    this.setState({\n      activeStep,\n    });\n  };\n\n  handleBack = () => {\n    const { activeStep } = this.state;\n    this.setState({\n      activeStep: activeStep - 1,\n    });\n  };\n\n  handleStep = step => () => {\n    this.setState({\n      activeStep: step,\n    });\n  };\n\n  handleComplete = () => {\n    const { completed } = this.state;\n    completed[this.state.activeStep] = true;\n    this.setState({\n      completed,\n    });\n    this.handleNext();\n  };\n\n  handleReset = () => {\n    this.setState({\n      activeStep: 0,\n      completed: {},\n    });\n  };\n\n  completedSteps() {\n    return Object.keys(this.state.completed).length;\n  }\n\n  isLastStep() {\n    return this.state.activeStep === this.totalSteps() - 1;\n  }\n\n  allStepsCompleted() {\n    return this.completedSteps() === this.totalSteps();\n  }\n\n  render() {\n    const { classes } = this.props;\n    const steps = getSteps();\n    const { activeStep } = this.state;\n\n    return (\n      <div className={classes.root}>\n        <Stepper nonLinear activeStep={activeStep}>\n          {steps.map((label, index) => {\n            return (\n              <Step key={label}>\n                <StepButton\n                  onClick={this.handleStep(index)}\n                  completed={this.state.completed[index]}\n                >\n                  {label}\n                </StepButton>\n              </Step>\n            );\n          })}\n        </Stepper>\n        <div>\n          {this.allStepsCompleted() ? (\n            <div>\n              <Typography className={classes.instructions}>\n                All steps completed - you&quot;re finished\n              </Typography>\n              <Button onClick={this.handleReset}>Reset</Button>\n            </div>\n          ) : (\n            <div>\n              <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\n              <div>\n                <Button\n                  disabled={activeStep === 0}\n                  onClick={this.handleBack}\n                  className={classes.button}\n                >\n                  Back\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={this.handleNext}\n                  className={classes.button}\n                >\n                  Next\n                </Button>\n                {activeStep !== steps.length &&\n                  (this.state.completed[this.state.activeStep] ? (\n                    <Typography variant=\"caption\" className={classes.completed}>\n                      Step {activeStep + 1} already completed\n                    </Typography>\n                  ) : (\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.handleComplete}>\n                      {this.completedSteps() === this.totalSteps() - 1 ? 'Finish' : 'Complete Step'}\n                    </Button>\n                  ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nHorizontalNonLinearStepper.propTypes = {\n  classes: PropTypes.object,\n};\n\nexport default withStyles(styles)(HorizontalNonLinearStepper);\n"]},"metadata":{},"sourceType":"module"}