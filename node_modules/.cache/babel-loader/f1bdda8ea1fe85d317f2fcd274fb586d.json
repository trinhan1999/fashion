{"ast":null,"code":"var _jsxFileName = \"D:\\\\admin\\\\src\\\\components\\\\Sidebar\\\\Sidebar.js\";\nimport React, { useState } from 'react';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport List from '@material-ui/core/List';\nimport PropTypes from 'prop-types';\nimport SidebarItem from './SidebarItem';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport { drawerWidth } from '../../styleVariables';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { withRouter } from 'react-router-dom';\nimport withWidth from '@material-ui/core/withWidth';\nconst iOS = process.browser && /iPad|iPhone|iPod/.test(navigator.userAgent);\nconst useStyles = makeStyles(theme => ({\n  drawerPaper: {\n    position: 'relative',\n    width: drawerWidth,\n    maxWidth: drawerWidth,\n    height: '100%',\n    zIndex: theme.zIndex.drawer + 99\n  },\n  modal: {\n    [theme.breakpoints.down('sm')]: {\n      top: '56px!important'\n    },\n    [theme.breakpoints.up('sm')]: {\n      top: '64px!important'\n    },\n    zIndex: '1000!important'\n  },\n  backdrop: {\n    [theme.breakpoints.down('sm')]: {\n      top: '56px'\n    },\n    [theme.breakpoints.up('sm')]: {\n      top: '64px'\n    }\n  }\n}));\n\nconst Sidebar = ({\n  opened,\n  toggleDrawer,\n  routes,\n  location\n}) => {\n  const classes = useStyles();\n  const [activeRoute, setActiveRoute] = useState(undefined);\n\n  const toggleMenu = index => setActiveRoute(activeRoute === index ? undefined : index);\n\n  const menu = /*#__PURE__*/React.createElement(List, {\n    component: \"div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, routes.map((route, index) => {\n    const isCurrentPath = location.pathname.indexOf(route.path) > -1 ? true : false;\n    return /*#__PURE__*/React.createElement(SidebarItem, {\n      key: index,\n      index: index,\n      route: route,\n      activeRoute: activeRoute,\n      toggleMenu: toggleMenu,\n      currentPath: isCurrentPath,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    });\n  }));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Hidden, {\n    smDown: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Drawer, {\n    variant: \"persistent\",\n    classes: {\n      paper: classes.drawerPaper\n    },\n    open: opened,\n    ModalProps: {\n      keepMounted: false,\n      className: classes.modal,\n      BackdropProps: {\n        className: classes.backdrop\n      },\n      onBackdropClick: toggleDrawer\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, menu)), /*#__PURE__*/React.createElement(Hidden, {\n    mdUp: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SwipeableDrawer, {\n    variant: \"temporary\",\n    classes: {\n      paper: classes.drawerPaper\n    },\n    open: opened,\n    onClose: toggleDrawer,\n    onOpen: toggleDrawer,\n    disableBackdropTransition: !iOS,\n    ModalProps: {\n      keepMounted: false,\n      className: classes.modal,\n      BackdropProps: {\n        className: classes.backdrop\n      },\n      onBackdropClick: toggleDrawer\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, menu)));\n};\n\nSidebar.prototypes = {\n  opened: PropTypes.func,\n  toggleDrawer: PropTypes.func,\n  closeDrawer: PropTypes.func,\n  openDrawer: PropTypes.func,\n  routes: PropTypes.object\n};\nconst SidebarWithRouter = withRouter(Sidebar);\nexport default withWidth()(SidebarWithRouter);","map":{"version":3,"sources":["D:/admin/src/components/Sidebar/Sidebar.js"],"names":["React","useState","Drawer","Hidden","List","PropTypes","SidebarItem","SwipeableDrawer","drawerWidth","makeStyles","withRouter","withWidth","iOS","process","browser","test","navigator","userAgent","useStyles","theme","drawerPaper","position","width","maxWidth","height","zIndex","drawer","modal","breakpoints","down","top","up","backdrop","Sidebar","opened","toggleDrawer","routes","location","classes","activeRoute","setActiveRoute","undefined","toggleMenu","index","menu","map","route","isCurrentPath","pathname","indexOf","path","paper","keepMounted","className","BackdropProps","onBackdropClick","prototypes","func","closeDrawer","openDrawer","object","SidebarWithRouter"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport List from '@material-ui/core/List';\nimport PropTypes from 'prop-types';\nimport SidebarItem from './SidebarItem';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport { drawerWidth } from '../../styleVariables';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { withRouter } from 'react-router-dom';\nimport withWidth from '@material-ui/core/withWidth';\n\nconst iOS = process.browser && /iPad|iPhone|iPod/.test(navigator.userAgent);\n\nconst useStyles = makeStyles(theme => ({\n  drawerPaper: {\n    position: 'relative',\n    width: drawerWidth,\n    maxWidth: drawerWidth,\n    height: '100%',\n    zIndex: theme.zIndex.drawer + 99\n  },\n  modal: {\n    [theme.breakpoints.down('sm')]: {\n      top: '56px!important'\n    },\n    [theme.breakpoints.up('sm')]: {\n      top: '64px!important'\n    },\n    zIndex: '1000!important'\n  },\n  backdrop: {\n    [theme.breakpoints.down('sm')]: {\n      top: '56px'\n    },\n    [theme.breakpoints.up('sm')]: {\n      top: '64px'\n    }\n  }\n}));\n\nconst Sidebar = ({ opened, toggleDrawer, routes, location }) => {\n  const classes = useStyles();\n  const [activeRoute, setActiveRoute] = useState(undefined);\n  const toggleMenu = index =>\n    setActiveRoute(activeRoute === index ? undefined : index);\n\n  const menu = (\n    <List component=\"div\">\n      {routes.map((route, index) => {\n        const isCurrentPath =\n          location.pathname.indexOf(route.path) > -1 ? true : false;\n        return (\n          <SidebarItem\n            key={index}\n            index={index}\n            route={route}\n            activeRoute={activeRoute}\n            toggleMenu={toggleMenu}\n            currentPath={isCurrentPath}\n          />\n        );\n      })}\n    </List>\n  );\n\n  return (\n    <>\n      <Hidden smDown>\n        <Drawer\n          variant=\"persistent\"\n          classes={{\n            paper: classes.drawerPaper\n          }}\n          open={opened}\n          ModalProps={{\n            keepMounted: false,\n            className: classes.modal,\n            BackdropProps: {\n              className: classes.backdrop\n            },\n            onBackdropClick: toggleDrawer\n          }}\n        >\n          {menu}\n        </Drawer>\n      </Hidden>\n      <Hidden mdUp>\n        <SwipeableDrawer\n          variant=\"temporary\"\n          classes={{\n            paper: classes.drawerPaper\n          }}\n          open={opened}\n          onClose={toggleDrawer}\n          onOpen={toggleDrawer}\n          disableBackdropTransition={!iOS}\n          ModalProps={{\n            keepMounted: false,\n            className: classes.modal,\n            BackdropProps: {\n              className: classes.backdrop\n            },\n            onBackdropClick: toggleDrawer\n          }}\n        >\n          {menu}\n        </SwipeableDrawer>\n      </Hidden>\n    </>\n  );\n};\n\nSidebar.prototypes = {\n  opened: PropTypes.func,\n  toggleDrawer: PropTypes.func,\n  closeDrawer: PropTypes.func,\n  openDrawer: PropTypes.func,\n  routes: PropTypes.object\n};\n\nconst SidebarWithRouter = withRouter(Sidebar);\n\nexport default withWidth()(SidebarWithRouter);\n"]},"metadata":{},"sourceType":"module"}