{"ast":null,"code":"var _jsxFileName = \"D:\\\\admin\\\\src\\\\components\\\\Cards\\\\WeatherCard.js\";\nimport React, { useEffect, useState } from 'react';\nimport { capitalize, getWeather, getWeatherIcon, windDirection } from '../../helpers';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport CallMadeIcon from '@material-ui/icons/CallMade';\nimport CallReceivedIcon from '@material-ui/icons/CallReceived';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport classNames from 'classnames';\nimport format from 'date-fns/format';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  flip: {\n    transform: 'rotate(-90deg)'\n  },\n  weatherBackground: {\n    backgroundColor: theme.palette.primary.main\n  },\n  weatherDetails: {\n    color: theme.palette.primary.contrastText\n  },\n  weatherIcon: {\n    fontSize: 26\n  }\n}));\n\nconst getWindDirection = (degree, classes) => {\n  const direction = windDirection(degree);\n\n  switch (direction) {\n    case 'n':\n      return /*#__PURE__*/React.createElement(ArrowUpwardIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 14\n        }\n      });\n\n    case 'ne':\n      return /*#__PURE__*/React.createElement(CallMadeIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 14\n        }\n      });\n\n    case 'e':\n      return /*#__PURE__*/React.createElement(ArrowForwardIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 14\n        }\n      });\n\n    case 'se':\n      return /*#__PURE__*/React.createElement(CallReceivedIcon, {\n        className: classes.flip,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 14\n        }\n      });\n\n    case 's':\n      return /*#__PURE__*/React.createElement(ArrowDownwardIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 14\n        }\n      });\n\n    case 'sw':\n      return /*#__PURE__*/React.createElement(CallReceivedIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 14\n        }\n      });\n\n    case 'w':\n      return /*#__PURE__*/React.createElement(ArrowBackIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 14\n        }\n      });\n\n    case 'nw':\n      return /*#__PURE__*/React.createElement(CallMadeIcon, {\n        className: classes.flip,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 14\n        }\n      });\n\n    default:\n      break;\n  }\n};\n\nconst WeatherCard = ({\n  city,\n  country,\n  days\n}) => {\n  const classes = useStyles();\n  const [current, setCurrent] = useState(undefined);\n  const [forecast, setForecast] = useState(undefined);\n  useEffect(() => {\n    (async function () {\n      try {\n        const forecast = await getWeather(city, country, days);\n\n        if (forecast) {\n          const current = forecast.list[0];\n          setCurrent(current);\n          setForecast(forecast);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [city, country, days]);\n  return /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, current && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 0,\n    direction: 'row',\n    justify: 'space-between',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }\n  }, forecast && /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 19\n    }\n  }, `${forecast.city.name}, ${forecast.city.country}`), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, format(current.dt * 1000, 'MMMM Do YYYY, h:mm:ss a')), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"caption\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, capitalize(current.weather[0].description))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    className: \"text-xs-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 19\n    }\n  }, current.main.temp)))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: 'center',\n    direction: 'row',\n    justify: 'space-between',\n    className: \"my-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, Object.keys(current.main).map((key, index) => /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 0,\n    alignItems: 'center',\n    direction: 'row',\n    justify: 'space-between',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"caption\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 25\n    }\n  }, capitalize(key.replace(/_/g, ' '))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"caption\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 25\n    }\n  }, current.main[key])))))))), /*#__PURE__*/React.createElement(CardContent, {\n    className: classes.weatherBackground,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, forecast && /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 0,\n    alignItems: 'center',\n    direction: 'row',\n    justify: 'space-between',\n    className: \"text-xs-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 15\n    }\n  }, forecast.list.map((day, index) => index !== 0 && /*#__PURE__*/React.createElement(Typography, {\n    variant: \"caption\",\n    className: classes.weatherDetails,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 25\n    }\n  }, day.weather.description), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"block py-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 25\n    }\n  }, getWindDirection(day.wind.deg, classes)), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"block pb-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 25\n    }\n  }, format(current.dt * 1000, 'ddd')), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"block pb-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: classNames(getWeatherIcon(day.weather[0].icon), classes.weatherIcon),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 27\n    }\n  })), /*#__PURE__*/React.createElement(\"strong\", {\n    className: \"block pb-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 25\n    }\n  }, `${day.main.temp}`, \" \\xB0\")))))), !current && !forecast && /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  }, \"Weather Data Not Loaded\")));\n};\n\nWeatherCard.propTypes = {\n  city: PropTypes.string,\n  country: PropTypes.string,\n  days: PropTypes.number\n};\nexport default WeatherCard;","map":{"version":3,"sources":["D:/admin/src/components/Cards/WeatherCard.js"],"names":["React","useEffect","useState","capitalize","getWeather","getWeatherIcon","windDirection","ArrowBackIcon","ArrowDownwardIcon","ArrowForwardIcon","ArrowUpwardIcon","CallMadeIcon","CallReceivedIcon","Card","CardContent","Grid","PropTypes","Typography","classNames","format","makeStyles","useStyles","theme","flip","transform","weatherBackground","backgroundColor","palette","primary","main","weatherDetails","color","contrastText","weatherIcon","fontSize","getWindDirection","degree","classes","direction","WeatherCard","city","country","days","current","setCurrent","undefined","forecast","setForecast","list","e","console","error","name","dt","weather","description","temp","Object","keys","map","key","index","replace","day","wind","deg","icon","propTypes","string","number"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  capitalize,\n  getWeather,\n  getWeatherIcon,\n  windDirection\n} from '../../helpers';\n\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport CallMadeIcon from '@material-ui/icons/CallMade';\nimport CallReceivedIcon from '@material-ui/icons/CallReceived';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport classNames from 'classnames';\nimport format from 'date-fns/format';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  flip: {\n    transform: 'rotate(-90deg)'\n  },\n  weatherBackground: {\n    backgroundColor: theme.palette.primary.main\n  },\n  weatherDetails: {\n    color: theme.palette.primary.contrastText\n  },\n  weatherIcon: {\n    fontSize: 26\n  }\n}));\n\nconst getWindDirection = (degree, classes) => {\n  const direction = windDirection(degree);\n  switch (direction) {\n    case 'n':\n      return <ArrowUpwardIcon />;\n    case 'ne':\n      return <CallMadeIcon />;\n    case 'e':\n      return <ArrowForwardIcon />;\n    case 'se':\n      return <CallReceivedIcon className={classes.flip} />;\n    case 's':\n      return <ArrowDownwardIcon />;\n    case 'sw':\n      return <CallReceivedIcon />;\n    case 'w':\n      return <ArrowBackIcon />;\n    case 'nw':\n      return <CallMadeIcon className={classes.flip} />;\n    default:\n      break;\n  }\n};\n\nconst WeatherCard = ({ city, country, days }) => {\n  const classes = useStyles();\n  const [current, setCurrent] = useState(undefined);\n  const [forecast, setForecast] = useState(undefined);\n\n  useEffect(() => {\n    (async function() {\n      try {\n        const forecast = await getWeather(city, country, days);\n\n        if (forecast) {\n          const current = forecast.list[0];\n          setCurrent(current);\n          setForecast(forecast);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [city, country, days]);\n\n  return (\n    <Card>\n      {current && (\n        <>\n          <CardContent>\n            <Grid\n              container\n              spacing={0}\n              direction={'row'}\n              justify={'space-between'}\n            >\n              <Grid item>\n                {forecast && (\n                  <Typography variant=\"h6\">{`${forecast.city.name}, ${forecast.city.country}`}</Typography>\n                )}\n                <Typography variant=\"subtitle1\">\n                  {format(current.dt * 1000, 'MMMM Do YYYY, h:mm:ss a')}\n                </Typography>\n                <Typography variant=\"caption\">\n                  {capitalize(current.weather[0].description)}\n                </Typography>\n              </Grid>\n              <Grid item className=\"text-xs-right\">\n                <Typography variant=\"h4\">\n                  <span>{current.main.temp}</span>\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid\n              container\n              spacing={1}\n              alignItems={'center'}\n              direction={'row'}\n              justify={'space-between'}\n              className=\"my-1\"\n            >\n              {Object.keys(current.main).map((key, index) => (\n                <Grid item xs={6} key={index}>\n                  <Grid\n                    container\n                    spacing={0}\n                    alignItems={'center'}\n                    direction={'row'}\n                    justify={'space-between'}\n                  >\n                    <Grid item>\n                      <Typography variant=\"caption\">\n                        <span>{capitalize(key.replace(/_/g, ' '))}</span>\n                      </Typography>\n                    </Grid>\n                    <Grid item>\n                      <Typography variant=\"caption\">\n                        <span>{current.main[key]}</span>\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              ))}\n            </Grid>\n          </CardContent>\n          <CardContent className={classes.weatherBackground}>\n            {forecast && (\n              <Grid\n                container\n                spacing={0}\n                alignItems={'center'}\n                direction={'row'}\n                justify={'space-between'}\n                className=\"text-xs-center\"\n              >\n                {forecast.list.map(\n                  (day, index) =>\n                    index !== 0 && (\n                      <Typography\n                        variant=\"caption\"\n                        className={classes.weatherDetails}\n                        key={index}\n                      >\n                        <span className=\"block\">{day.weather.description}</span>\n                        <span className=\"block py-xs\">\n                          {getWindDirection(day.wind.deg, classes)}\n                        </span>\n                        <span className=\"block pb-xs\">\n                          {format(current.dt * 1000, 'ddd')}\n                        </span>\n                        <span className=\"block pb-xs\">\n                          <i\n                            className={classNames(\n                              getWeatherIcon(day.weather[0].icon),\n                              classes.weatherIcon\n                            )}\n                          />\n                        </span>\n                        <strong className=\"block pb-xs\">\n                          {`${day.main.temp}`} &deg;\n                        </strong>\n                      </Typography>\n                    )\n                )}\n              </Grid>\n            )}\n          </CardContent>\n        </>\n      )}\n      {!current && !forecast && (\n        <CardContent>\n          <Typography>Weather Data Not Loaded</Typography>\n        </CardContent>\n      )}\n    </Card>\n  );\n};\n\nWeatherCard.propTypes = {\n  city: PropTypes.string,\n  country: PropTypes.string,\n  days: PropTypes.number\n};\n\nexport default WeatherCard;\n"]},"metadata":{},"sourceType":"module"}