{"ast":null,"code":"/**\n * Takes an array of [keyValue1, keyValue2] pairs and creates an object of {keyValue1: keyValue2, keyValue2: keyValue1}\n * @param {Array} array the array of pairs\n * @return {Object} the {key, value} pair object\n */\nfunction arrayToObject(array) {\n  return array.reduce(function (obj, _ref) {\n    var prop1 = _ref[0],\n        prop2 = _ref[1];\n    obj[prop1] = prop2;\n    obj[prop2] = prop1;\n    return obj;\n  }, {});\n}\n\nfunction isBoolean(val) {\n  return typeof val === 'boolean';\n}\n\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\n\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\nfunction isNullOrUndefined(val) {\n  return val === null || typeof val === 'undefined';\n}\n\nfunction isObject(val) {\n  return val && typeof val === 'object';\n}\n\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\nfunction includes(inclusive, inclusee) {\n  return inclusive.indexOf(inclusee) !== -1;\n}\n/**\n * Flip the sign of a CSS value, possibly with a unit.\n *\n * We can't just negate the value with unary minus due to the units.\n *\n * @private\n * @param {String} value - the original value (for example 77%)\n * @return {String} the result (for example -77%)\n */\n\n\nfunction flipSign(value) {\n  if (parseFloat(value) === 0) {\n    // Don't mangle zeroes\n    return value;\n  }\n\n  if (value[0] === '-') {\n    return value.slice(1);\n  }\n\n  return \"-\" + value;\n}\n\nfunction flipTransformSign(match, prefix, offset, suffix) {\n  return prefix + flipSign(offset) + suffix;\n}\n/**\n * Takes a percentage for background position and inverts it.\n * This was copied and modified from CSSJanus:\n * https://github.com/cssjanus/cssjanus/blob/4245f834365f6cfb0239191a151432fb85abab23/src/cssjanus.js#L152-L175\n * @param {String} value - the original value (for example 77%)\n * @return {String} the result (for example 23%)\n */\n\n\nfunction calculateNewBackgroundPosition(value) {\n  var idx = value.indexOf('.');\n\n  if (idx === -1) {\n    value = 100 - parseFloat(value) + \"%\";\n  } else {\n    // Two off, one for the \"%\" at the end, one for the dot itself\n    var len = value.length - idx - 2;\n    value = 100 - parseFloat(value);\n    value = value.toFixed(len) + \"%\";\n  }\n\n  return value;\n}\n/**\n * This takes a list of CSS values and converts it to an array\n * @param {String} value - something like `1px`, `1px 2em`, or `3pt rgb(150, 230, 550) 40px calc(100% - 5px)`\n * @return {Array} the split values (for example: `['3pt', 'rgb(150, 230, 550)', '40px', 'calc(100% - 5px)']`)\n */\n\n\nfunction getValuesAsList(value) {\n  return value.replace(/ +/g, ' ') // remove all extraneous spaces\n  .split(' ').map(function (i) {\n    return i.trim();\n  }) // get rid of extra space before/after each item\n  .filter(Boolean) // get rid of empty strings\n  // join items which are within parenthese\n  // luckily `calc (100% - 5px)` is invalid syntax and it must be `calc(100% - 5px)`, otherwise this would be even more complex\n  .reduce(function (_ref2, item) {\n    var list = _ref2.list,\n        state = _ref2.state;\n    var openParansCount = (item.match(/\\(/g) || []).length;\n    var closedParansCount = (item.match(/\\)/g) || []).length;\n\n    if (state.parensDepth > 0) {\n      list[list.length - 1] = list[list.length - 1] + \" \" + item;\n    } else {\n      list.push(item);\n    }\n\n    state.parensDepth += openParansCount - closedParansCount;\n    return {\n      list: list,\n      state: state\n    };\n  }, {\n    list: [],\n    state: {\n      parensDepth: 0\n    }\n  }).list;\n}\n/**\n * This is intended for properties that are `top right bottom left` and will switch them to `top left bottom right`\n * @param {String} value - `1px 2px 3px 4px` for example, but also handles cases where there are too few/too many and\n * simply returns the value in those cases (which is the correct behavior)\n * @return {String} the result - `1px 4px 3px 2px` for example.\n */\n\n\nfunction handleQuartetValues(value) {\n  var splitValues = getValuesAsList(value);\n\n  if (splitValues.length <= 3 || splitValues.length > 4) {\n    return value;\n  }\n\n  var top = splitValues[0],\n      right = splitValues[1],\n      bottom = splitValues[2],\n      left = splitValues[3];\n  return [top, left, bottom, right].join(' ');\n}\n\nvar propertyValueConverters = {\n  padding: function padding(_ref) {\n    var value = _ref.value;\n\n    if (isNumber(value)) {\n      return value;\n    }\n\n    return handleQuartetValues(value);\n  },\n  textShadow: function textShadow(_ref2) {\n    var value = _ref2.value; // intentionally leaving off the `g` flag here because we only want to change the first number (which is the offset-x)\n\n    return value.replace(/(-*)([.|\\d]+)/, function (match, negative, number) {\n      if (number === '0') {\n        return match;\n      }\n\n      var doubleNegative = negative === '' ? '-' : '';\n      return \"\" + doubleNegative + number;\n    });\n  },\n  borderColor: function borderColor(_ref3) {\n    var value = _ref3.value;\n    return handleQuartetValues(value);\n  },\n  borderRadius: function borderRadius(_ref4) {\n    var value = _ref4.value;\n\n    if (isNumber(value)) {\n      return value;\n    }\n\n    if (includes(value, '/')) {\n      var _value$split = value.split('/'),\n          radius1 = _value$split[0],\n          radius2 = _value$split[1];\n\n      var convertedRadius1 = propertyValueConverters.borderRadius({\n        value: radius1.trim()\n      });\n      var convertedRadius2 = propertyValueConverters.borderRadius({\n        value: radius2.trim()\n      });\n      return convertedRadius1 + \" / \" + convertedRadius2;\n    }\n\n    var splitValues = getValuesAsList(value);\n\n    switch (splitValues.length) {\n      case 2:\n        {\n          return splitValues.reverse().join(' ');\n        }\n\n      case 4:\n        {\n          var topLeft = splitValues[0],\n              topRight = splitValues[1],\n              bottomRight = splitValues[2],\n              bottomLeft = splitValues[3];\n          return [topRight, topLeft, bottomLeft, bottomRight].join(' ');\n        }\n\n      default:\n        {\n          return value;\n        }\n    }\n  },\n  background: function background(_ref5) {\n    var value = _ref5.value,\n        valuesToConvert = _ref5.valuesToConvert,\n        isRtl = _ref5.isRtl,\n        bgImgDirectionRegex = _ref5.bgImgDirectionRegex,\n        bgPosDirectionRegex = _ref5.bgPosDirectionRegex; // Yeah, this is in need of a refactor üôÉ...\n    // but this property is a tough cookie üç™\n    // get the backgroundPosition out of the string by removing everything that couldn't be the backgroundPosition value\n\n    var backgroundPositionValue = value.replace(/(url\\(.*?\\))|(rgba?\\(.*?\\))|(hsl\\(.*?\\))|(#[a-fA-F0-9]+)|((^| )(\\D)+( |$))/g, '').trim(); // replace that backgroundPosition value with the converted version\n\n    value = value.replace(backgroundPositionValue, propertyValueConverters.backgroundPosition({\n      value: backgroundPositionValue,\n      valuesToConvert: valuesToConvert,\n      isRtl: isRtl,\n      bgPosDirectionRegex: bgPosDirectionRegex\n    })); // do the backgroundImage value replacing on the whole value (because why not?)\n\n    return propertyValueConverters.backgroundImage({\n      value: value,\n      valuesToConvert: valuesToConvert,\n      bgImgDirectionRegex: bgImgDirectionRegex\n    });\n  },\n  backgroundImage: function backgroundImage(_ref6) {\n    var value = _ref6.value,\n        valuesToConvert = _ref6.valuesToConvert,\n        bgImgDirectionRegex = _ref6.bgImgDirectionRegex;\n\n    if (!includes(value, 'url(') && !includes(value, 'linear-gradient(')) {\n      return value;\n    }\n\n    return value.replace(bgImgDirectionRegex, function (match, g1, group2) {\n      return match.replace(group2, valuesToConvert[group2]);\n    });\n  },\n  backgroundPosition: function backgroundPosition(_ref7) {\n    var value = _ref7.value,\n        valuesToConvert = _ref7.valuesToConvert,\n        isRtl = _ref7.isRtl,\n        bgPosDirectionRegex = _ref7.bgPosDirectionRegex;\n    return value // intentionally only grabbing the first instance of this because that represents `left`\n    .replace(isRtl ? /^((-|\\d|\\.)+%)/ : null, function (match, group) {\n      return calculateNewBackgroundPosition(group);\n    }).replace(bgPosDirectionRegex, function (match) {\n      return valuesToConvert[match];\n    });\n  },\n  backgroundPositionX: function backgroundPositionX(_ref8) {\n    var value = _ref8.value,\n        valuesToConvert = _ref8.valuesToConvert,\n        isRtl = _ref8.isRtl,\n        bgPosDirectionRegex = _ref8.bgPosDirectionRegex;\n\n    if (isNumber(value)) {\n      return value;\n    }\n\n    return propertyValueConverters.backgroundPosition({\n      value: value,\n      valuesToConvert: valuesToConvert,\n      isRtl: isRtl,\n      bgPosDirectionRegex: bgPosDirectionRegex\n    });\n  },\n  transition: function transition(_ref9) {\n    var value = _ref9.value,\n        propertiesToConvert = _ref9.propertiesToConvert;\n    return value.split(/,\\s*/g).map(function (transition) {\n      var values = transition.split(' '); // Property is always defined first\n\n      values[0] = propertiesToConvert[values[0]] || values[0];\n      return values.join(' ');\n    }).join(', ');\n  },\n  transitionProperty: function transitionProperty(_ref10) {\n    var value = _ref10.value,\n        propertiesToConvert = _ref10.propertiesToConvert;\n    return value.split(/,\\s*/g).map(function (prop) {\n      return propertiesToConvert[prop] || prop;\n    }).join(', ');\n  },\n  transform: function transform(_ref11) {\n    var value = _ref11.value; // This was copied and modified from CSSJanus:\n    // https://github.com/cssjanus/cssjanus/blob/4a40f001b1ba35567112d8b8e1d9d95eda4234c3/src/cssjanus.js#L152-L153\n\n    var nonAsciiPattern = \"[^\\\\u0020-\\\\u007e]\";\n    var escapePattern = \"(?:\" + '(?:(?:\\\\[0-9a-f]{1,6})(?:\\\\r\\\\n|\\\\s)?)' + \"|\\\\\\\\[^\\\\r\\\\n\\\\f0-9a-f])\";\n    var signedQuantPattern = \"((?:-?\" + ('(?:[0-9]*\\\\.[0-9]+|[0-9]+)' + \"(?:\\\\s*\" + '(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)' + \"|\" + (\"-?\" + (\"(?:[_a-z]|\" + nonAsciiPattern + \"|\" + escapePattern + \")\") + (\"(?:[_a-z0-9-]|\" + nonAsciiPattern + \"|\" + escapePattern + \")\") + \"*\") + \")?\") + \")|(?:inherit|auto))\";\n    var translateXRegExp = new RegExp(\"(translateX\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"(\\\\s*\\\\))\", 'gi');\n    var translateRegExp = new RegExp(\"(translate\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"((?:\\\\s*,\\\\s*\" + signedQuantPattern + \"){0,1}\\\\s*\\\\))\", 'gi');\n    var translate3dRegExp = new RegExp(\"(translate3d\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"((?:\\\\s*,\\\\s*\" + signedQuantPattern + \"){0,2}\\\\s*\\\\))\", 'gi');\n    var rotateRegExp = new RegExp(\"(rotate[ZY]?\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"(\\\\s*\\\\))\", 'gi');\n    return value.replace(translateXRegExp, flipTransformSign).replace(translateRegExp, flipTransformSign).replace(translate3dRegExp, flipTransformSign).replace(rotateRegExp, flipTransformSign);\n  }\n};\npropertyValueConverters.objectPosition = propertyValueConverters.backgroundPosition;\npropertyValueConverters.margin = propertyValueConverters.padding;\npropertyValueConverters.borderWidth = propertyValueConverters.padding;\npropertyValueConverters.boxShadow = propertyValueConverters.textShadow;\npropertyValueConverters.webkitBoxShadow = propertyValueConverters.boxShadow;\npropertyValueConverters.mozBoxShadow = propertyValueConverters.boxShadow;\npropertyValueConverters.WebkitBoxShadow = propertyValueConverters.boxShadow;\npropertyValueConverters.MozBoxShadow = propertyValueConverters.boxShadow;\npropertyValueConverters.borderStyle = propertyValueConverters.borderColor;\npropertyValueConverters.webkitTransform = propertyValueConverters.transform;\npropertyValueConverters.mozTransform = propertyValueConverters.transform;\npropertyValueConverters.WebkitTransform = propertyValueConverters.transform;\npropertyValueConverters.MozTransform = propertyValueConverters.transform;\npropertyValueConverters.transformOrigin = propertyValueConverters.backgroundPosition;\npropertyValueConverters.webkitTransformOrigin = propertyValueConverters.transformOrigin;\npropertyValueConverters.mozTransformOrigin = propertyValueConverters.transformOrigin;\npropertyValueConverters.WebkitTransformOrigin = propertyValueConverters.transformOrigin;\npropertyValueConverters.MozTransformOrigin = propertyValueConverters.transformOrigin;\npropertyValueConverters.webkitTransition = propertyValueConverters.transition;\npropertyValueConverters.mozTransition = propertyValueConverters.transition;\npropertyValueConverters.WebkitTransition = propertyValueConverters.transition;\npropertyValueConverters.MozTransition = propertyValueConverters.transition;\npropertyValueConverters.webkitTransitionProperty = propertyValueConverters.transitionProperty;\npropertyValueConverters.mozTransitionProperty = propertyValueConverters.transitionProperty;\npropertyValueConverters.WebkitTransitionProperty = propertyValueConverters.transitionProperty;\npropertyValueConverters.MozTransitionProperty = propertyValueConverters.transitionProperty; // kebab-case versions\n\npropertyValueConverters['text-shadow'] = propertyValueConverters.textShadow;\npropertyValueConverters['border-color'] = propertyValueConverters.borderColor;\npropertyValueConverters['border-radius'] = propertyValueConverters.borderRadius;\npropertyValueConverters['background-image'] = propertyValueConverters.backgroundImage;\npropertyValueConverters['background-position'] = propertyValueConverters.backgroundPosition;\npropertyValueConverters['background-position-x'] = propertyValueConverters.backgroundPositionX;\npropertyValueConverters['object-position'] = propertyValueConverters.objectPosition;\npropertyValueConverters['border-width'] = propertyValueConverters.padding;\npropertyValueConverters['box-shadow'] = propertyValueConverters.textShadow;\npropertyValueConverters['-webkit-box-shadow'] = propertyValueConverters.textShadow;\npropertyValueConverters['-moz-box-shadow'] = propertyValueConverters.textShadow;\npropertyValueConverters['border-style'] = propertyValueConverters.borderColor;\npropertyValueConverters['-webkit-transform'] = propertyValueConverters.transform;\npropertyValueConverters['-moz-transform'] = propertyValueConverters.transform;\npropertyValueConverters['transform-origin'] = propertyValueConverters.transformOrigin;\npropertyValueConverters['-webkit-transform-origin'] = propertyValueConverters.transformOrigin;\npropertyValueConverters['-moz-transform-origin'] = propertyValueConverters.transformOrigin;\npropertyValueConverters['-webkit-transition'] = propertyValueConverters.transition;\npropertyValueConverters['-moz-transition'] = propertyValueConverters.transition;\npropertyValueConverters['transition-property'] = propertyValueConverters.transitionProperty;\npropertyValueConverters['-webkit-transition-property'] = propertyValueConverters.transitionProperty;\npropertyValueConverters['-moz-transition-property'] = propertyValueConverters.transitionProperty;\nvar propertiesToConvert = arrayToObject([['paddingLeft', 'paddingRight'], ['marginLeft', 'marginRight'], ['left', 'right'], ['borderLeft', 'borderRight'], ['borderLeftColor', 'borderRightColor'], ['borderLeftStyle', 'borderRightStyle'], ['borderLeftWidth', 'borderRightWidth'], ['borderTopLeftRadius', 'borderTopRightRadius'], ['borderBottomLeftRadius', 'borderBottomRightRadius'], // kebab-case versions\n['padding-left', 'padding-right'], ['margin-left', 'margin-right'], ['border-left', 'border-right'], ['border-left-color', 'border-right-color'], ['border-left-style', 'border-right-style'], ['border-left-width', 'border-right-width'], ['border-top-left-radius', 'border-top-right-radius'], ['border-bottom-left-radius', 'border-bottom-right-radius']]);\nvar propsToIgnore = ['content']; // this is the same as the propertiesToConvert except for values\n\nvar valuesToConvert = arrayToObject([['ltr', 'rtl'], ['left', 'right'], ['w-resize', 'e-resize'], ['sw-resize', 'se-resize'], ['nw-resize', 'ne-resize']]); // Sorry for the regex üòû, but basically thisis used to replace _every_ instance of\n// `ltr`, `rtl`, `right`, and `left` in `backgroundimage` with the corresponding opposite.\n// A situation we're accepting here:\n// url('/left/right/rtl/ltr.png') will be changed to url('/right/left/ltr/rtl.png')\n// Definite trade-offs here, but I think it's a good call.\n\nvar bgImgDirectionRegex = new RegExp('(^|\\\\W|_)((ltr)|(rtl)|(left)|(right))(\\\\W|_|$)', 'g');\nvar bgPosDirectionRegex = new RegExp('(left)|(right)');\n/**\n * converts properties and values in the CSS in JS object to their corresponding RTL values\n * @param {Object} object the CSS in JS object\n * @return {Object} the RTL converted object\n */\n\nfunction convert(object) {\n  return Object.keys(object).reduce(function (newObj, originalKey) {\n    var originalValue = object[originalKey];\n\n    if (isString(originalValue)) {\n      // you're welcome to later code üò∫\n      originalValue = originalValue.trim();\n    } // Some properties should never be transformed\n\n\n    if (includes(propsToIgnore, originalKey)) {\n      newObj[originalKey] = originalValue;\n      return newObj;\n    }\n\n    var _convertProperty = convertProperty(originalKey, originalValue),\n        key = _convertProperty.key,\n        value = _convertProperty.value;\n\n    newObj[key] = value;\n    return newObj;\n  }, Array.isArray(object) ? [] : {});\n}\n/**\n * Converts a property and its value to the corresponding RTL key and value\n * @param {String} originalKey the original property key\n * @param {Number|String|Object} originalValue the original css property value\n * @return {Object} the new {key, value} pair\n */\n\n\nfunction convertProperty(originalKey, originalValue) {\n  var isNoFlip = /\\/\\*\\s?@noflip\\s?\\*\\//.test(originalValue);\n  var key = isNoFlip ? originalKey : getPropertyDoppelganger(originalKey);\n  var value = isNoFlip ? originalValue : getValueDoppelganger(key, originalValue);\n  return {\n    key: key,\n    value: value\n  };\n}\n/**\n * This gets the RTL version of the given property if it has a corresponding RTL property\n * @param {String} property the name of the property\n * @return {String} the name of the RTL property\n */\n\n\nfunction getPropertyDoppelganger(property) {\n  return propertiesToConvert[property] || property;\n}\n/**\n * This converts the given value to the RTL version of that value based on the key\n * @param {String} key this is the key (note: this should be the RTL version of the originalKey)\n * @param {String|Number|Object} originalValue the original css property value. If it's an object, then we'll convert that as well\n * @return {String|Number|Object} the converted value\n */\n\n\nfunction getValueDoppelganger(key, originalValue) {\n  /* eslint complexity:[2, 10] */\n  // let's try to keep the complexity down... If we have to do this much more, let's break this up\n  if (isNullOrUndefined(originalValue) || isBoolean(originalValue)) {\n    return originalValue;\n  }\n\n  if (isObject(originalValue)) {\n    return convert(originalValue); // recurssion üåÄ\n  }\n\n  var isNum = isNumber(originalValue);\n  var isFunc = isFunction(originalValue);\n  var importantlessValue = isNum || isFunc ? originalValue : originalValue.replace(/ !important.*?$/, '');\n  var isImportant = !isNum && importantlessValue.length !== originalValue.length;\n  var valueConverter = propertyValueConverters[key];\n  var newValue;\n\n  if (valueConverter) {\n    newValue = valueConverter({\n      value: importantlessValue,\n      valuesToConvert: valuesToConvert,\n      propertiesToConvert: propertiesToConvert,\n      isRtl: true,\n      bgImgDirectionRegex: bgImgDirectionRegex,\n      bgPosDirectionRegex: bgPosDirectionRegex\n    });\n  } else {\n    newValue = valuesToConvert[importantlessValue] || importantlessValue;\n  }\n\n  if (isImportant) {\n    return newValue + \" !important\";\n  }\n\n  return newValue;\n}\n\nexport { propertiesToConvert as a, propsToIgnore as b, convert as c, convertProperty as d, getValueDoppelganger as e, arrayToObject as f, getPropertyDoppelganger as g, calculateNewBackgroundPosition as h, flipTransformSign as i, flipSign as j, handleQuartetValues as k, includes as l, isBoolean as m, isFunction as n, isNullOrUndefined as o, propertyValueConverters as p, isNumber as q, isObject as r, isString as s, getValuesAsList as t, valuesToConvert as v };","map":{"version":3,"sources":["D:/admin/node_modules/rtl-css-js/dist/esm/convert-096451b2.js"],"names":["arrayToObject","array","reduce","obj","_ref","prop1","prop2","isBoolean","val","isFunction","isNumber","isNullOrUndefined","isObject","isString","includes","inclusive","inclusee","indexOf","flipSign","value","parseFloat","slice","flipTransformSign","match","prefix","offset","suffix","calculateNewBackgroundPosition","idx","len","length","toFixed","getValuesAsList","replace","split","map","i","trim","filter","Boolean","_ref2","item","list","state","openParansCount","closedParansCount","parensDepth","push","handleQuartetValues","splitValues","top","right","bottom","left","join","propertyValueConverters","padding","textShadow","negative","number","doubleNegative","borderColor","_ref3","borderRadius","_ref4","_value$split","radius1","radius2","convertedRadius1","convertedRadius2","reverse","topLeft","topRight","bottomRight","bottomLeft","background","_ref5","valuesToConvert","isRtl","bgImgDirectionRegex","bgPosDirectionRegex","backgroundPositionValue","backgroundPosition","backgroundImage","_ref6","g1","group2","_ref7","group","backgroundPositionX","_ref8","transition","_ref9","propertiesToConvert","values","transitionProperty","_ref10","prop","transform","_ref11","nonAsciiPattern","escapePattern","signedQuantPattern","translateXRegExp","RegExp","translateRegExp","translate3dRegExp","rotateRegExp","objectPosition","margin","borderWidth","boxShadow","webkitBoxShadow","mozBoxShadow","WebkitBoxShadow","MozBoxShadow","borderStyle","webkitTransform","mozTransform","WebkitTransform","MozTransform","transformOrigin","webkitTransformOrigin","mozTransformOrigin","WebkitTransformOrigin","MozTransformOrigin","webkitTransition","mozTransition","WebkitTransition","MozTransition","webkitTransitionProperty","mozTransitionProperty","WebkitTransitionProperty","MozTransitionProperty","propsToIgnore","convert","object","Object","keys","newObj","originalKey","originalValue","_convertProperty","convertProperty","key","Array","isArray","isNoFlip","test","getPropertyDoppelganger","getValueDoppelganger","property","isNum","isFunc","importantlessValue","isImportant","valueConverter","newValue","a","b","c","d","e","f","g","h","j","k","l","m","n","o","p","q","r","s","t","v"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,SAAOA,KAAK,CAACC,MAAN,CAAa,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AACvC,QAAIC,KAAK,GAAGD,IAAI,CAAC,CAAD,CAAhB;AAAA,QACIE,KAAK,GAAGF,IAAI,CAAC,CAAD,CADhB;AAEAD,IAAAA,GAAG,CAACE,KAAD,CAAH,GAAaC,KAAb;AACAH,IAAAA,GAAG,CAACG,KAAD,CAAH,GAAaD,KAAb;AACA,WAAOF,GAAP;AACD,GANM,EAMJ,EANI,CAAP;AAOD;;AAED,SAASI,SAAT,CAAmBC,GAAnB,EAAwB;AACtB,SAAO,OAAOA,GAAP,KAAe,SAAtB;AACD;;AAED,SAASC,UAAT,CAAoBD,GAApB,EAAyB;AACvB,SAAO,OAAOA,GAAP,KAAe,UAAtB;AACD;;AAED,SAASE,QAAT,CAAkBF,GAAlB,EAAuB;AACrB,SAAO,OAAOA,GAAP,KAAe,QAAtB;AACD;;AAED,SAASG,iBAAT,CAA2BH,GAA3B,EAAgC;AAC9B,SAAOA,GAAG,KAAK,IAAR,IAAgB,OAAOA,GAAP,KAAe,WAAtC;AACD;;AAED,SAASI,QAAT,CAAkBJ,GAAlB,EAAuB;AACrB,SAAOA,GAAG,IAAI,OAAOA,GAAP,KAAe,QAA7B;AACD;;AAED,SAASK,QAAT,CAAkBL,GAAlB,EAAuB;AACrB,SAAO,OAAOA,GAAP,KAAe,QAAtB;AACD;;AAED,SAASM,QAAT,CAAkBC,SAAlB,EAA6BC,QAA7B,EAAuC;AACrC,SAAOD,SAAS,CAACE,OAAV,CAAkBD,QAAlB,MAAgC,CAAC,CAAxC;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASE,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,MAAIC,UAAU,CAACD,KAAD,CAAV,KAAsB,CAA1B,EAA6B;AAC3B;AACA,WAAOA,KAAP;AACD;;AAED,MAAIA,KAAK,CAAC,CAAD,CAAL,KAAa,GAAjB,EAAsB;AACpB,WAAOA,KAAK,CAACE,KAAN,CAAY,CAAZ,CAAP;AACD;;AAED,SAAO,MAAMF,KAAb;AACD;;AAED,SAASG,iBAAT,CAA2BC,KAA3B,EAAkCC,MAAlC,EAA0CC,MAA1C,EAAkDC,MAAlD,EAA0D;AACxD,SAAOF,MAAM,GAAGN,QAAQ,CAACO,MAAD,CAAjB,GAA4BC,MAAnC;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,8BAAT,CAAwCR,KAAxC,EAA+C;AAC7C,MAAIS,GAAG,GAAGT,KAAK,CAACF,OAAN,CAAc,GAAd,CAAV;;AAEA,MAAIW,GAAG,KAAK,CAAC,CAAb,EAAgB;AACdT,IAAAA,KAAK,GAAG,MAAMC,UAAU,CAACD,KAAD,CAAhB,GAA0B,GAAlC;AACD,GAFD,MAEO;AACL;AACA,QAAIU,GAAG,GAAGV,KAAK,CAACW,MAAN,GAAeF,GAAf,GAAqB,CAA/B;AACAT,IAAAA,KAAK,GAAG,MAAMC,UAAU,CAACD,KAAD,CAAxB;AACAA,IAAAA,KAAK,GAAGA,KAAK,CAACY,OAAN,CAAcF,GAAd,IAAqB,GAA7B;AACD;;AAED,SAAOV,KAAP;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASa,eAAT,CAAyBb,KAAzB,EAAgC;AAC9B,SAAOA,KAAK,CAACc,OAAN,CAAc,KAAd,EAAqB,GAArB,EAA0B;AAA1B,GACNC,KADM,CACA,GADA,EACKC,GADL,CACS,UAAUC,CAAV,EAAa;AAC3B,WAAOA,CAAC,CAACC,IAAF,EAAP;AACD,GAHM,EAGJ;AAHI,GAINC,MAJM,CAICC,OAJD,EAIU;AACjB;AACA;AANO,GAONrC,MAPM,CAOC,UAAUsC,KAAV,EAAiBC,IAAjB,EAAuB;AAC7B,QAAIC,IAAI,GAAGF,KAAK,CAACE,IAAjB;AAAA,QACIC,KAAK,GAAGH,KAAK,CAACG,KADlB;AAEA,QAAIC,eAAe,GAAG,CAACH,IAAI,CAAClB,KAAL,CAAW,KAAX,KAAqB,EAAtB,EAA0BO,MAAhD;AACA,QAAIe,iBAAiB,GAAG,CAACJ,IAAI,CAAClB,KAAL,CAAW,KAAX,KAAqB,EAAtB,EAA0BO,MAAlD;;AAEA,QAAIa,KAAK,CAACG,WAAN,GAAoB,CAAxB,EAA2B;AACzBJ,MAAAA,IAAI,CAACA,IAAI,CAACZ,MAAL,GAAc,CAAf,CAAJ,GAAwBY,IAAI,CAACA,IAAI,CAACZ,MAAL,GAAc,CAAf,CAAJ,GAAwB,GAAxB,GAA8BW,IAAtD;AACD,KAFD,MAEO;AACLC,MAAAA,IAAI,CAACK,IAAL,CAAUN,IAAV;AACD;;AAEDE,IAAAA,KAAK,CAACG,WAAN,IAAqBF,eAAe,GAAGC,iBAAvC;AACA,WAAO;AACLH,MAAAA,IAAI,EAAEA,IADD;AAELC,MAAAA,KAAK,EAAEA;AAFF,KAAP;AAID,GAxBM,EAwBJ;AACDD,IAAAA,IAAI,EAAE,EADL;AAEDC,IAAAA,KAAK,EAAE;AACLG,MAAAA,WAAW,EAAE;AADR;AAFN,GAxBI,EA6BJJ,IA7BH;AA8BD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASM,mBAAT,CAA6B7B,KAA7B,EAAoC;AAClC,MAAI8B,WAAW,GAAGjB,eAAe,CAACb,KAAD,CAAjC;;AAEA,MAAI8B,WAAW,CAACnB,MAAZ,IAAsB,CAAtB,IAA2BmB,WAAW,CAACnB,MAAZ,GAAqB,CAApD,EAAuD;AACrD,WAAOX,KAAP;AACD;;AAED,MAAI+B,GAAG,GAAGD,WAAW,CAAC,CAAD,CAArB;AAAA,MACIE,KAAK,GAAGF,WAAW,CAAC,CAAD,CADvB;AAAA,MAEIG,MAAM,GAAGH,WAAW,CAAC,CAAD,CAFxB;AAAA,MAGII,IAAI,GAAGJ,WAAW,CAAC,CAAD,CAHtB;AAIA,SAAO,CAACC,GAAD,EAAMG,IAAN,EAAYD,MAAZ,EAAoBD,KAApB,EAA2BG,IAA3B,CAAgC,GAAhC,CAAP;AACD;;AAED,IAAIC,uBAAuB,GAAG;AAC5BC,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBpD,IAAjB,EAAuB;AAC9B,QAAIe,KAAK,GAAGf,IAAI,CAACe,KAAjB;;AAEA,QAAIT,QAAQ,CAACS,KAAD,CAAZ,EAAqB;AACnB,aAAOA,KAAP;AACD;;AAED,WAAO6B,mBAAmB,CAAC7B,KAAD,CAA1B;AACD,GAT2B;AAU5BsC,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBjB,KAApB,EAA2B;AACrC,QAAIrB,KAAK,GAAGqB,KAAK,CAACrB,KAAlB,CADqC,CAErC;;AACA,WAAOA,KAAK,CAACc,OAAN,CAAc,eAAd,EAA+B,UAAUV,KAAV,EAAiBmC,QAAjB,EAA2BC,MAA3B,EAAmC;AACvE,UAAIA,MAAM,KAAK,GAAf,EAAoB;AAClB,eAAOpC,KAAP;AACD;;AAED,UAAIqC,cAAc,GAAGF,QAAQ,KAAK,EAAb,GAAkB,GAAlB,GAAwB,EAA7C;AACA,aAAO,KAAKE,cAAL,GAAsBD,MAA7B;AACD,KAPM,CAAP;AAQD,GArB2B;AAsB5BE,EAAAA,WAAW,EAAE,SAASA,WAAT,CAAqBC,KAArB,EAA4B;AACvC,QAAI3C,KAAK,GAAG2C,KAAK,CAAC3C,KAAlB;AACA,WAAO6B,mBAAmB,CAAC7B,KAAD,CAA1B;AACD,GAzB2B;AA0B5B4C,EAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBC,KAAtB,EAA6B;AACzC,QAAI7C,KAAK,GAAG6C,KAAK,CAAC7C,KAAlB;;AAEA,QAAIT,QAAQ,CAACS,KAAD,CAAZ,EAAqB;AACnB,aAAOA,KAAP;AACD;;AAED,QAAIL,QAAQ,CAACK,KAAD,EAAQ,GAAR,CAAZ,EAA0B;AACxB,UAAI8C,YAAY,GAAG9C,KAAK,CAACe,KAAN,CAAY,GAAZ,CAAnB;AAAA,UACIgC,OAAO,GAAGD,YAAY,CAAC,CAAD,CAD1B;AAAA,UAEIE,OAAO,GAAGF,YAAY,CAAC,CAAD,CAF1B;;AAIA,UAAIG,gBAAgB,GAAGb,uBAAuB,CAACQ,YAAxB,CAAqC;AAC1D5C,QAAAA,KAAK,EAAE+C,OAAO,CAAC7B,IAAR;AADmD,OAArC,CAAvB;AAGA,UAAIgC,gBAAgB,GAAGd,uBAAuB,CAACQ,YAAxB,CAAqC;AAC1D5C,QAAAA,KAAK,EAAEgD,OAAO,CAAC9B,IAAR;AADmD,OAArC,CAAvB;AAGA,aAAO+B,gBAAgB,GAAG,KAAnB,GAA2BC,gBAAlC;AACD;;AAED,QAAIpB,WAAW,GAAGjB,eAAe,CAACb,KAAD,CAAjC;;AAEA,YAAQ8B,WAAW,CAACnB,MAApB;AACE,WAAK,CAAL;AACE;AACE,iBAAOmB,WAAW,CAACqB,OAAZ,GAAsBhB,IAAtB,CAA2B,GAA3B,CAAP;AACD;;AAEH,WAAK,CAAL;AACE;AACE,cAAIiB,OAAO,GAAGtB,WAAW,CAAC,CAAD,CAAzB;AAAA,cACIuB,QAAQ,GAAGvB,WAAW,CAAC,CAAD,CAD1B;AAAA,cAEIwB,WAAW,GAAGxB,WAAW,CAAC,CAAD,CAF7B;AAAA,cAGIyB,UAAU,GAAGzB,WAAW,CAAC,CAAD,CAH5B;AAIA,iBAAO,CAACuB,QAAD,EAAWD,OAAX,EAAoBG,UAApB,EAAgCD,WAAhC,EAA6CnB,IAA7C,CAAkD,GAAlD,CAAP;AACD;;AAEH;AACE;AACE,iBAAOnC,KAAP;AACD;AAlBL;AAoBD,GArE2B;AAsE5BwD,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBC,KAApB,EAA2B;AACrC,QAAIzD,KAAK,GAAGyD,KAAK,CAACzD,KAAlB;AAAA,QACI0D,eAAe,GAAGD,KAAK,CAACC,eAD5B;AAAA,QAEIC,KAAK,GAAGF,KAAK,CAACE,KAFlB;AAAA,QAGIC,mBAAmB,GAAGH,KAAK,CAACG,mBAHhC;AAAA,QAIIC,mBAAmB,GAAGJ,KAAK,CAACI,mBAJhC,CADqC,CAMrC;AACA;AACA;;AACA,QAAIC,uBAAuB,GAAG9D,KAAK,CAACc,OAAN,CAAc,6EAAd,EAA6F,EAA7F,EAAiGI,IAAjG,EAA9B,CATqC,CASkG;;AAEvIlB,IAAAA,KAAK,GAAGA,KAAK,CAACc,OAAN,CAAcgD,uBAAd,EAAuC1B,uBAAuB,CAAC2B,kBAAxB,CAA2C;AACxF/D,MAAAA,KAAK,EAAE8D,uBADiF;AAExFJ,MAAAA,eAAe,EAAEA,eAFuE;AAGxFC,MAAAA,KAAK,EAAEA,KAHiF;AAIxFE,MAAAA,mBAAmB,EAAEA;AAJmE,KAA3C,CAAvC,CAAR,CAXqC,CAgBhC;;AAEL,WAAOzB,uBAAuB,CAAC4B,eAAxB,CAAwC;AAC7ChE,MAAAA,KAAK,EAAEA,KADsC;AAE7C0D,MAAAA,eAAe,EAAEA,eAF4B;AAG7CE,MAAAA,mBAAmB,EAAEA;AAHwB,KAAxC,CAAP;AAKD,GA7F2B;AA8F5BI,EAAAA,eAAe,EAAE,SAASA,eAAT,CAAyBC,KAAzB,EAAgC;AAC/C,QAAIjE,KAAK,GAAGiE,KAAK,CAACjE,KAAlB;AAAA,QACI0D,eAAe,GAAGO,KAAK,CAACP,eAD5B;AAAA,QAEIE,mBAAmB,GAAGK,KAAK,CAACL,mBAFhC;;AAIA,QAAI,CAACjE,QAAQ,CAACK,KAAD,EAAQ,MAAR,CAAT,IAA4B,CAACL,QAAQ,CAACK,KAAD,EAAQ,kBAAR,CAAzC,EAAsE;AACpE,aAAOA,KAAP;AACD;;AAED,WAAOA,KAAK,CAACc,OAAN,CAAc8C,mBAAd,EAAmC,UAAUxD,KAAV,EAAiB8D,EAAjB,EAAqBC,MAArB,EAA6B;AACrE,aAAO/D,KAAK,CAACU,OAAN,CAAcqD,MAAd,EAAsBT,eAAe,CAACS,MAAD,CAArC,CAAP;AACD,KAFM,CAAP;AAGD,GA1G2B;AA2G5BJ,EAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BK,KAA5B,EAAmC;AACrD,QAAIpE,KAAK,GAAGoE,KAAK,CAACpE,KAAlB;AAAA,QACI0D,eAAe,GAAGU,KAAK,CAACV,eAD5B;AAAA,QAEIC,KAAK,GAAGS,KAAK,CAACT,KAFlB;AAAA,QAGIE,mBAAmB,GAAGO,KAAK,CAACP,mBAHhC;AAIA,WAAO7D,KAAK,CAAC;AAAD,KACXc,OADM,CACE6C,KAAK,GAAG,gBAAH,GAAsB,IAD7B,EACmC,UAAUvD,KAAV,EAAiBiE,KAAjB,EAAwB;AAChE,aAAO7D,8BAA8B,CAAC6D,KAAD,CAArC;AACD,KAHM,EAGJvD,OAHI,CAGI+C,mBAHJ,EAGyB,UAAUzD,KAAV,EAAiB;AAC/C,aAAOsD,eAAe,CAACtD,KAAD,CAAtB;AACD,KALM,CAAP;AAMD,GAtH2B;AAuH5BkE,EAAAA,mBAAmB,EAAE,SAASA,mBAAT,CAA6BC,KAA7B,EAAoC;AACvD,QAAIvE,KAAK,GAAGuE,KAAK,CAACvE,KAAlB;AAAA,QACI0D,eAAe,GAAGa,KAAK,CAACb,eAD5B;AAAA,QAEIC,KAAK,GAAGY,KAAK,CAACZ,KAFlB;AAAA,QAGIE,mBAAmB,GAAGU,KAAK,CAACV,mBAHhC;;AAKA,QAAItE,QAAQ,CAACS,KAAD,CAAZ,EAAqB;AACnB,aAAOA,KAAP;AACD;;AAED,WAAOoC,uBAAuB,CAAC2B,kBAAxB,CAA2C;AAChD/D,MAAAA,KAAK,EAAEA,KADyC;AAEhD0D,MAAAA,eAAe,EAAEA,eAF+B;AAGhDC,MAAAA,KAAK,EAAEA,KAHyC;AAIhDE,MAAAA,mBAAmB,EAAEA;AAJ2B,KAA3C,CAAP;AAMD,GAvI2B;AAwI5BW,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBC,KAApB,EAA2B;AACrC,QAAIzE,KAAK,GAAGyE,KAAK,CAACzE,KAAlB;AAAA,QACI0E,mBAAmB,GAAGD,KAAK,CAACC,mBADhC;AAEA,WAAO1E,KAAK,CAACe,KAAN,CAAY,OAAZ,EAAqBC,GAArB,CAAyB,UAAUwD,UAAV,EAAsB;AACpD,UAAIG,MAAM,GAAGH,UAAU,CAACzD,KAAX,CAAiB,GAAjB,CAAb,CADoD,CAChB;;AAEpC4D,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAYD,mBAAmB,CAACC,MAAM,CAAC,CAAD,CAAP,CAAnB,IAAkCA,MAAM,CAAC,CAAD,CAApD;AACA,aAAOA,MAAM,CAACxC,IAAP,CAAY,GAAZ,CAAP;AACD,KALM,EAKJA,IALI,CAKC,IALD,CAAP;AAMD,GAjJ2B;AAkJ5ByC,EAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,MAA5B,EAAoC;AACtD,QAAI7E,KAAK,GAAG6E,MAAM,CAAC7E,KAAnB;AAAA,QACI0E,mBAAmB,GAAGG,MAAM,CAACH,mBADjC;AAEA,WAAO1E,KAAK,CAACe,KAAN,CAAY,OAAZ,EAAqBC,GAArB,CAAyB,UAAU8D,IAAV,EAAgB;AAC9C,aAAOJ,mBAAmB,CAACI,IAAD,CAAnB,IAA6BA,IAApC;AACD,KAFM,EAEJ3C,IAFI,CAEC,IAFD,CAAP;AAGD,GAxJ2B;AAyJ5B4C,EAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,MAAnB,EAA2B;AACpC,QAAIhF,KAAK,GAAGgF,MAAM,CAAChF,KAAnB,CADoC,CAEpC;AACA;;AACA,QAAIiF,eAAe,GAAG,oBAAtB;AACA,QAAIC,aAAa,GAAG,QAAQ,wCAAR,GAAmD,0BAAvE;AACA,QAAIC,kBAAkB,GAAG,YAAY,+BAA+B,SAA/B,GAA2C,wDAA3C,GAAsG,GAAtG,IAA6G,QAAQ,eAAeF,eAAf,GAAiC,GAAjC,GAAuCC,aAAvC,GAAuD,GAA/D,KAAuE,mBAAmBD,eAAnB,GAAqC,GAArC,GAA2CC,aAA3C,GAA2D,GAAlI,IAAyI,GAAtP,IAA6P,IAAzQ,IAAiR,qBAA1S;AACA,QAAIE,gBAAgB,GAAG,IAAIC,MAAJ,CAAW,4BAA4BF,kBAA5B,GAAiD,WAA5D,EAAyE,IAAzE,CAAvB;AACA,QAAIG,eAAe,GAAG,IAAID,MAAJ,CAAW,2BAA2BF,kBAA3B,GAAgD,eAAhD,GAAkEA,kBAAlE,GAAuF,gBAAlG,EAAoH,IAApH,CAAtB;AACA,QAAII,iBAAiB,GAAG,IAAIF,MAAJ,CAAW,6BAA6BF,kBAA7B,GAAkD,eAAlD,GAAoEA,kBAApE,GAAyF,gBAApG,EAAsH,IAAtH,CAAxB;AACA,QAAIK,YAAY,GAAG,IAAIH,MAAJ,CAAW,6BAA6BF,kBAA7B,GAAkD,WAA7D,EAA0E,IAA1E,CAAnB;AACA,WAAOnF,KAAK,CAACc,OAAN,CAAcsE,gBAAd,EAAgCjF,iBAAhC,EAAmDW,OAAnD,CAA2DwE,eAA3D,EAA4EnF,iBAA5E,EAA+FW,OAA/F,CAAuGyE,iBAAvG,EAA0HpF,iBAA1H,EAA6IW,OAA7I,CAAqJ0E,YAArJ,EAAmKrF,iBAAnK,CAAP;AACD;AArK2B,CAA9B;AAuKAiC,uBAAuB,CAACqD,cAAxB,GAAyCrD,uBAAuB,CAAC2B,kBAAjE;AACA3B,uBAAuB,CAACsD,MAAxB,GAAiCtD,uBAAuB,CAACC,OAAzD;AACAD,uBAAuB,CAACuD,WAAxB,GAAsCvD,uBAAuB,CAACC,OAA9D;AACAD,uBAAuB,CAACwD,SAAxB,GAAoCxD,uBAAuB,CAACE,UAA5D;AACAF,uBAAuB,CAACyD,eAAxB,GAA0CzD,uBAAuB,CAACwD,SAAlE;AACAxD,uBAAuB,CAAC0D,YAAxB,GAAuC1D,uBAAuB,CAACwD,SAA/D;AACAxD,uBAAuB,CAAC2D,eAAxB,GAA0C3D,uBAAuB,CAACwD,SAAlE;AACAxD,uBAAuB,CAAC4D,YAAxB,GAAuC5D,uBAAuB,CAACwD,SAA/D;AACAxD,uBAAuB,CAAC6D,WAAxB,GAAsC7D,uBAAuB,CAACM,WAA9D;AACAN,uBAAuB,CAAC8D,eAAxB,GAA0C9D,uBAAuB,CAAC2C,SAAlE;AACA3C,uBAAuB,CAAC+D,YAAxB,GAAuC/D,uBAAuB,CAAC2C,SAA/D;AACA3C,uBAAuB,CAACgE,eAAxB,GAA0ChE,uBAAuB,CAAC2C,SAAlE;AACA3C,uBAAuB,CAACiE,YAAxB,GAAuCjE,uBAAuB,CAAC2C,SAA/D;AACA3C,uBAAuB,CAACkE,eAAxB,GAA0ClE,uBAAuB,CAAC2B,kBAAlE;AACA3B,uBAAuB,CAACmE,qBAAxB,GAAgDnE,uBAAuB,CAACkE,eAAxE;AACAlE,uBAAuB,CAACoE,kBAAxB,GAA6CpE,uBAAuB,CAACkE,eAArE;AACAlE,uBAAuB,CAACqE,qBAAxB,GAAgDrE,uBAAuB,CAACkE,eAAxE;AACAlE,uBAAuB,CAACsE,kBAAxB,GAA6CtE,uBAAuB,CAACkE,eAArE;AACAlE,uBAAuB,CAACuE,gBAAxB,GAA2CvE,uBAAuB,CAACoC,UAAnE;AACApC,uBAAuB,CAACwE,aAAxB,GAAwCxE,uBAAuB,CAACoC,UAAhE;AACApC,uBAAuB,CAACyE,gBAAxB,GAA2CzE,uBAAuB,CAACoC,UAAnE;AACApC,uBAAuB,CAAC0E,aAAxB,GAAwC1E,uBAAuB,CAACoC,UAAhE;AACApC,uBAAuB,CAAC2E,wBAAxB,GAAmD3E,uBAAuB,CAACwC,kBAA3E;AACAxC,uBAAuB,CAAC4E,qBAAxB,GAAgD5E,uBAAuB,CAACwC,kBAAxE;AACAxC,uBAAuB,CAAC6E,wBAAxB,GAAmD7E,uBAAuB,CAACwC,kBAA3E;AACAxC,uBAAuB,CAAC8E,qBAAxB,GAAgD9E,uBAAuB,CAACwC,kBAAxE,C,CAA4F;;AAE5FxC,uBAAuB,CAAC,aAAD,CAAvB,GAAyCA,uBAAuB,CAACE,UAAjE;AACAF,uBAAuB,CAAC,cAAD,CAAvB,GAA0CA,uBAAuB,CAACM,WAAlE;AACAN,uBAAuB,CAAC,eAAD,CAAvB,GAA2CA,uBAAuB,CAACQ,YAAnE;AACAR,uBAAuB,CAAC,kBAAD,CAAvB,GAA8CA,uBAAuB,CAAC4B,eAAtE;AACA5B,uBAAuB,CAAC,qBAAD,CAAvB,GAAiDA,uBAAuB,CAAC2B,kBAAzE;AACA3B,uBAAuB,CAAC,uBAAD,CAAvB,GAAmDA,uBAAuB,CAACkC,mBAA3E;AACAlC,uBAAuB,CAAC,iBAAD,CAAvB,GAA6CA,uBAAuB,CAACqD,cAArE;AACArD,uBAAuB,CAAC,cAAD,CAAvB,GAA0CA,uBAAuB,CAACC,OAAlE;AACAD,uBAAuB,CAAC,YAAD,CAAvB,GAAwCA,uBAAuB,CAACE,UAAhE;AACAF,uBAAuB,CAAC,oBAAD,CAAvB,GAAgDA,uBAAuB,CAACE,UAAxE;AACAF,uBAAuB,CAAC,iBAAD,CAAvB,GAA6CA,uBAAuB,CAACE,UAArE;AACAF,uBAAuB,CAAC,cAAD,CAAvB,GAA0CA,uBAAuB,CAACM,WAAlE;AACAN,uBAAuB,CAAC,mBAAD,CAAvB,GAA+CA,uBAAuB,CAAC2C,SAAvE;AACA3C,uBAAuB,CAAC,gBAAD,CAAvB,GAA4CA,uBAAuB,CAAC2C,SAApE;AACA3C,uBAAuB,CAAC,kBAAD,CAAvB,GAA8CA,uBAAuB,CAACkE,eAAtE;AACAlE,uBAAuB,CAAC,0BAAD,CAAvB,GAAsDA,uBAAuB,CAACkE,eAA9E;AACAlE,uBAAuB,CAAC,uBAAD,CAAvB,GAAmDA,uBAAuB,CAACkE,eAA3E;AACAlE,uBAAuB,CAAC,oBAAD,CAAvB,GAAgDA,uBAAuB,CAACoC,UAAxE;AACApC,uBAAuB,CAAC,iBAAD,CAAvB,GAA6CA,uBAAuB,CAACoC,UAArE;AACApC,uBAAuB,CAAC,qBAAD,CAAvB,GAAiDA,uBAAuB,CAACwC,kBAAzE;AACAxC,uBAAuB,CAAC,6BAAD,CAAvB,GAAyDA,uBAAuB,CAACwC,kBAAjF;AACAxC,uBAAuB,CAAC,0BAAD,CAAvB,GAAsDA,uBAAuB,CAACwC,kBAA9E;AAEA,IAAIF,mBAAmB,GAAG7F,aAAa,CAAC,CAAC,CAAC,aAAD,EAAgB,cAAhB,CAAD,EAAkC,CAAC,YAAD,EAAe,aAAf,CAAlC,EAAiE,CAAC,MAAD,EAAS,OAAT,CAAjE,EAAoF,CAAC,YAAD,EAAe,aAAf,CAApF,EAAmH,CAAC,iBAAD,EAAoB,kBAApB,CAAnH,EAA4J,CAAC,iBAAD,EAAoB,kBAApB,CAA5J,EAAqM,CAAC,iBAAD,EAAoB,kBAApB,CAArM,EAA8O,CAAC,qBAAD,EAAwB,sBAAxB,CAA9O,EAA+R,CAAC,wBAAD,EAA2B,yBAA3B,CAA/R,EAAsV;AAC9X,CAAC,cAAD,EAAiB,eAAjB,CADwC,EACL,CAAC,aAAD,EAAgB,cAAhB,CADK,EAC4B,CAAC,aAAD,EAAgB,cAAhB,CAD5B,EAC6D,CAAC,mBAAD,EAAsB,oBAAtB,CAD7D,EAC0G,CAAC,mBAAD,EAAsB,oBAAtB,CAD1G,EACuJ,CAAC,mBAAD,EAAsB,oBAAtB,CADvJ,EACoM,CAAC,wBAAD,EAA2B,yBAA3B,CADpM,EAC2P,CAAC,2BAAD,EAA8B,4BAA9B,CAD3P,CAAD,CAAvC;AAEA,IAAIsI,aAAa,GAAG,CAAC,SAAD,CAApB,C,CAAiC;;AAEjC,IAAIzD,eAAe,GAAG7E,aAAa,CAAC,CAAC,CAAC,KAAD,EAAQ,KAAR,CAAD,EAAiB,CAAC,MAAD,EAAS,OAAT,CAAjB,EAAoC,CAAC,UAAD,EAAa,UAAb,CAApC,EAA8D,CAAC,WAAD,EAAc,WAAd,CAA9D,EAA0F,CAAC,WAAD,EAAc,WAAd,CAA1F,CAAD,CAAnC,C,CAA4J;AAC5J;AACA;AACA;AACA;;AAEA,IAAI+E,mBAAmB,GAAG,IAAIyB,MAAJ,CAAW,gDAAX,EAA6D,GAA7D,CAA1B;AACA,IAAIxB,mBAAmB,GAAG,IAAIwB,MAAJ,CAAW,gBAAX,CAA1B;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS+B,OAAT,CAAiBC,MAAjB,EAAyB;AACvB,SAAOC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBtI,MAApB,CAA2B,UAAUyI,MAAV,EAAkBC,WAAlB,EAA+B;AAC/D,QAAIC,aAAa,GAAGL,MAAM,CAACI,WAAD,CAA1B;;AAEA,QAAI/H,QAAQ,CAACgI,aAAD,CAAZ,EAA6B;AAC3B;AACAA,MAAAA,aAAa,GAAGA,aAAa,CAACxG,IAAd,EAAhB;AACD,KAN8D,CAM7D;;;AAGF,QAAIvB,QAAQ,CAACwH,aAAD,EAAgBM,WAAhB,CAAZ,EAA0C;AACxCD,MAAAA,MAAM,CAACC,WAAD,CAAN,GAAsBC,aAAtB;AACA,aAAOF,MAAP;AACD;;AAED,QAAIG,gBAAgB,GAAGC,eAAe,CAACH,WAAD,EAAcC,aAAd,CAAtC;AAAA,QACIG,GAAG,GAAGF,gBAAgB,CAACE,GAD3B;AAAA,QAEI7H,KAAK,GAAG2H,gBAAgB,CAAC3H,KAF7B;;AAIAwH,IAAAA,MAAM,CAACK,GAAD,CAAN,GAAc7H,KAAd;AACA,WAAOwH,MAAP;AACD,GApBM,EAoBJM,KAAK,CAACC,OAAN,CAAcV,MAAd,IAAwB,EAAxB,GAA6B,EApBzB,CAAP;AAqBD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASO,eAAT,CAAyBH,WAAzB,EAAsCC,aAAtC,EAAqD;AACnD,MAAIM,QAAQ,GAAG,wBAAwBC,IAAxB,CAA6BP,aAA7B,CAAf;AACA,MAAIG,GAAG,GAAGG,QAAQ,GAAGP,WAAH,GAAiBS,uBAAuB,CAACT,WAAD,CAA1D;AACA,MAAIzH,KAAK,GAAGgI,QAAQ,GAAGN,aAAH,GAAmBS,oBAAoB,CAACN,GAAD,EAAMH,aAAN,CAA3D;AACA,SAAO;AACLG,IAAAA,GAAG,EAAEA,GADA;AAEL7H,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID;AACD;AACA;AACA;AACA;AACA;;;AAEA,SAASkI,uBAAT,CAAiCE,QAAjC,EAA2C;AACzC,SAAO1D,mBAAmB,CAAC0D,QAAD,CAAnB,IAAiCA,QAAxC;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASD,oBAAT,CAA8BN,GAA9B,EAAmCH,aAAnC,EAAkD;AAChD;AACA;AACA,MAAIlI,iBAAiB,CAACkI,aAAD,CAAjB,IAAoCtI,SAAS,CAACsI,aAAD,CAAjD,EAAkE;AAChE,WAAOA,aAAP;AACD;;AAED,MAAIjI,QAAQ,CAACiI,aAAD,CAAZ,EAA6B;AAC3B,WAAON,OAAO,CAACM,aAAD,CAAd,CAD2B,CACI;AAChC;;AAED,MAAIW,KAAK,GAAG9I,QAAQ,CAACmI,aAAD,CAApB;AACA,MAAIY,MAAM,GAAGhJ,UAAU,CAACoI,aAAD,CAAvB;AACA,MAAIa,kBAAkB,GAAGF,KAAK,IAAIC,MAAT,GAAkBZ,aAAlB,GAAkCA,aAAa,CAAC5G,OAAd,CAAsB,iBAAtB,EAAyC,EAAzC,CAA3D;AACA,MAAI0H,WAAW,GAAG,CAACH,KAAD,IAAUE,kBAAkB,CAAC5H,MAAnB,KAA8B+G,aAAa,CAAC/G,MAAxE;AACA,MAAI8H,cAAc,GAAGrG,uBAAuB,CAACyF,GAAD,CAA5C;AACA,MAAIa,QAAJ;;AAEA,MAAID,cAAJ,EAAoB;AAClBC,IAAAA,QAAQ,GAAGD,cAAc,CAAC;AACxBzI,MAAAA,KAAK,EAAEuI,kBADiB;AAExB7E,MAAAA,eAAe,EAAEA,eAFO;AAGxBgB,MAAAA,mBAAmB,EAAEA,mBAHG;AAIxBf,MAAAA,KAAK,EAAE,IAJiB;AAKxBC,MAAAA,mBAAmB,EAAEA,mBALG;AAMxBC,MAAAA,mBAAmB,EAAEA;AANG,KAAD,CAAzB;AAQD,GATD,MASO;AACL6E,IAAAA,QAAQ,GAAGhF,eAAe,CAAC6E,kBAAD,CAAf,IAAuCA,kBAAlD;AACD;;AAED,MAAIC,WAAJ,EAAiB;AACf,WAAOE,QAAQ,GAAG,aAAlB;AACD;;AAED,SAAOA,QAAP;AACD;;AAED,SAAShE,mBAAmB,IAAIiE,CAAhC,EAAmCxB,aAAa,IAAIyB,CAApD,EAAuDxB,OAAO,IAAIyB,CAAlE,EAAqEjB,eAAe,IAAIkB,CAAxF,EAA2FX,oBAAoB,IAAIY,CAAnH,EAAsHlK,aAAa,IAAImK,CAAvI,EAA0Id,uBAAuB,IAAIe,CAArK,EAAwKzI,8BAA8B,IAAI0I,CAA1M,EAA6M/I,iBAAiB,IAAIc,CAAlO,EAAqOlB,QAAQ,IAAIoJ,CAAjP,EAAoPtH,mBAAmB,IAAIuH,CAA3Q,EAA8QzJ,QAAQ,IAAI0J,CAA1R,EAA6RjK,SAAS,IAAIkK,CAA1S,EAA6ShK,UAAU,IAAIiK,CAA3T,EAA8T/J,iBAAiB,IAAIgK,CAAnV,EAAsVpH,uBAAuB,IAAIqH,CAAjX,EAAoXlK,QAAQ,IAAImK,CAAhY,EAAmYjK,QAAQ,IAAIkK,CAA/Y,EAAkZjK,QAAQ,IAAIkK,CAA9Z,EAAia/I,eAAe,IAAIgJ,CAApb,EAAubnG,eAAe,IAAIoG,CAA1c","sourcesContent":["/**\n * Takes an array of [keyValue1, keyValue2] pairs and creates an object of {keyValue1: keyValue2, keyValue2: keyValue1}\n * @param {Array} array the array of pairs\n * @return {Object} the {key, value} pair object\n */\nfunction arrayToObject(array) {\n  return array.reduce(function (obj, _ref) {\n    var prop1 = _ref[0],\n        prop2 = _ref[1];\n    obj[prop1] = prop2;\n    obj[prop2] = prop1;\n    return obj;\n  }, {});\n}\n\nfunction isBoolean(val) {\n  return typeof val === 'boolean';\n}\n\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\n\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\nfunction isNullOrUndefined(val) {\n  return val === null || typeof val === 'undefined';\n}\n\nfunction isObject(val) {\n  return val && typeof val === 'object';\n}\n\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\nfunction includes(inclusive, inclusee) {\n  return inclusive.indexOf(inclusee) !== -1;\n}\n/**\n * Flip the sign of a CSS value, possibly with a unit.\n *\n * We can't just negate the value with unary minus due to the units.\n *\n * @private\n * @param {String} value - the original value (for example 77%)\n * @return {String} the result (for example -77%)\n */\n\n\nfunction flipSign(value) {\n  if (parseFloat(value) === 0) {\n    // Don't mangle zeroes\n    return value;\n  }\n\n  if (value[0] === '-') {\n    return value.slice(1);\n  }\n\n  return \"-\" + value;\n}\n\nfunction flipTransformSign(match, prefix, offset, suffix) {\n  return prefix + flipSign(offset) + suffix;\n}\n/**\n * Takes a percentage for background position and inverts it.\n * This was copied and modified from CSSJanus:\n * https://github.com/cssjanus/cssjanus/blob/4245f834365f6cfb0239191a151432fb85abab23/src/cssjanus.js#L152-L175\n * @param {String} value - the original value (for example 77%)\n * @return {String} the result (for example 23%)\n */\n\n\nfunction calculateNewBackgroundPosition(value) {\n  var idx = value.indexOf('.');\n\n  if (idx === -1) {\n    value = 100 - parseFloat(value) + \"%\";\n  } else {\n    // Two off, one for the \"%\" at the end, one for the dot itself\n    var len = value.length - idx - 2;\n    value = 100 - parseFloat(value);\n    value = value.toFixed(len) + \"%\";\n  }\n\n  return value;\n}\n/**\n * This takes a list of CSS values and converts it to an array\n * @param {String} value - something like `1px`, `1px 2em`, or `3pt rgb(150, 230, 550) 40px calc(100% - 5px)`\n * @return {Array} the split values (for example: `['3pt', 'rgb(150, 230, 550)', '40px', 'calc(100% - 5px)']`)\n */\n\n\nfunction getValuesAsList(value) {\n  return value.replace(/ +/g, ' ') // remove all extraneous spaces\n  .split(' ').map(function (i) {\n    return i.trim();\n  }) // get rid of extra space before/after each item\n  .filter(Boolean) // get rid of empty strings\n  // join items which are within parenthese\n  // luckily `calc (100% - 5px)` is invalid syntax and it must be `calc(100% - 5px)`, otherwise this would be even more complex\n  .reduce(function (_ref2, item) {\n    var list = _ref2.list,\n        state = _ref2.state;\n    var openParansCount = (item.match(/\\(/g) || []).length;\n    var closedParansCount = (item.match(/\\)/g) || []).length;\n\n    if (state.parensDepth > 0) {\n      list[list.length - 1] = list[list.length - 1] + \" \" + item;\n    } else {\n      list.push(item);\n    }\n\n    state.parensDepth += openParansCount - closedParansCount;\n    return {\n      list: list,\n      state: state\n    };\n  }, {\n    list: [],\n    state: {\n      parensDepth: 0\n    }\n  }).list;\n}\n/**\n * This is intended for properties that are `top right bottom left` and will switch them to `top left bottom right`\n * @param {String} value - `1px 2px 3px 4px` for example, but also handles cases where there are too few/too many and\n * simply returns the value in those cases (which is the correct behavior)\n * @return {String} the result - `1px 4px 3px 2px` for example.\n */\n\n\nfunction handleQuartetValues(value) {\n  var splitValues = getValuesAsList(value);\n\n  if (splitValues.length <= 3 || splitValues.length > 4) {\n    return value;\n  }\n\n  var top = splitValues[0],\n      right = splitValues[1],\n      bottom = splitValues[2],\n      left = splitValues[3];\n  return [top, left, bottom, right].join(' ');\n}\n\nvar propertyValueConverters = {\n  padding: function padding(_ref) {\n    var value = _ref.value;\n\n    if (isNumber(value)) {\n      return value;\n    }\n\n    return handleQuartetValues(value);\n  },\n  textShadow: function textShadow(_ref2) {\n    var value = _ref2.value;\n    // intentionally leaving off the `g` flag here because we only want to change the first number (which is the offset-x)\n    return value.replace(/(-*)([.|\\d]+)/, function (match, negative, number) {\n      if (number === '0') {\n        return match;\n      }\n\n      var doubleNegative = negative === '' ? '-' : '';\n      return \"\" + doubleNegative + number;\n    });\n  },\n  borderColor: function borderColor(_ref3) {\n    var value = _ref3.value;\n    return handleQuartetValues(value);\n  },\n  borderRadius: function borderRadius(_ref4) {\n    var value = _ref4.value;\n\n    if (isNumber(value)) {\n      return value;\n    }\n\n    if (includes(value, '/')) {\n      var _value$split = value.split('/'),\n          radius1 = _value$split[0],\n          radius2 = _value$split[1];\n\n      var convertedRadius1 = propertyValueConverters.borderRadius({\n        value: radius1.trim()\n      });\n      var convertedRadius2 = propertyValueConverters.borderRadius({\n        value: radius2.trim()\n      });\n      return convertedRadius1 + \" / \" + convertedRadius2;\n    }\n\n    var splitValues = getValuesAsList(value);\n\n    switch (splitValues.length) {\n      case 2:\n        {\n          return splitValues.reverse().join(' ');\n        }\n\n      case 4:\n        {\n          var topLeft = splitValues[0],\n              topRight = splitValues[1],\n              bottomRight = splitValues[2],\n              bottomLeft = splitValues[3];\n          return [topRight, topLeft, bottomLeft, bottomRight].join(' ');\n        }\n\n      default:\n        {\n          return value;\n        }\n    }\n  },\n  background: function background(_ref5) {\n    var value = _ref5.value,\n        valuesToConvert = _ref5.valuesToConvert,\n        isRtl = _ref5.isRtl,\n        bgImgDirectionRegex = _ref5.bgImgDirectionRegex,\n        bgPosDirectionRegex = _ref5.bgPosDirectionRegex;\n    // Yeah, this is in need of a refactor üôÉ...\n    // but this property is a tough cookie üç™\n    // get the backgroundPosition out of the string by removing everything that couldn't be the backgroundPosition value\n    var backgroundPositionValue = value.replace(/(url\\(.*?\\))|(rgba?\\(.*?\\))|(hsl\\(.*?\\))|(#[a-fA-F0-9]+)|((^| )(\\D)+( |$))/g, '').trim(); // replace that backgroundPosition value with the converted version\n\n    value = value.replace(backgroundPositionValue, propertyValueConverters.backgroundPosition({\n      value: backgroundPositionValue,\n      valuesToConvert: valuesToConvert,\n      isRtl: isRtl,\n      bgPosDirectionRegex: bgPosDirectionRegex\n    })); // do the backgroundImage value replacing on the whole value (because why not?)\n\n    return propertyValueConverters.backgroundImage({\n      value: value,\n      valuesToConvert: valuesToConvert,\n      bgImgDirectionRegex: bgImgDirectionRegex\n    });\n  },\n  backgroundImage: function backgroundImage(_ref6) {\n    var value = _ref6.value,\n        valuesToConvert = _ref6.valuesToConvert,\n        bgImgDirectionRegex = _ref6.bgImgDirectionRegex;\n\n    if (!includes(value, 'url(') && !includes(value, 'linear-gradient(')) {\n      return value;\n    }\n\n    return value.replace(bgImgDirectionRegex, function (match, g1, group2) {\n      return match.replace(group2, valuesToConvert[group2]);\n    });\n  },\n  backgroundPosition: function backgroundPosition(_ref7) {\n    var value = _ref7.value,\n        valuesToConvert = _ref7.valuesToConvert,\n        isRtl = _ref7.isRtl,\n        bgPosDirectionRegex = _ref7.bgPosDirectionRegex;\n    return value // intentionally only grabbing the first instance of this because that represents `left`\n    .replace(isRtl ? /^((-|\\d|\\.)+%)/ : null, function (match, group) {\n      return calculateNewBackgroundPosition(group);\n    }).replace(bgPosDirectionRegex, function (match) {\n      return valuesToConvert[match];\n    });\n  },\n  backgroundPositionX: function backgroundPositionX(_ref8) {\n    var value = _ref8.value,\n        valuesToConvert = _ref8.valuesToConvert,\n        isRtl = _ref8.isRtl,\n        bgPosDirectionRegex = _ref8.bgPosDirectionRegex;\n\n    if (isNumber(value)) {\n      return value;\n    }\n\n    return propertyValueConverters.backgroundPosition({\n      value: value,\n      valuesToConvert: valuesToConvert,\n      isRtl: isRtl,\n      bgPosDirectionRegex: bgPosDirectionRegex\n    });\n  },\n  transition: function transition(_ref9) {\n    var value = _ref9.value,\n        propertiesToConvert = _ref9.propertiesToConvert;\n    return value.split(/,\\s*/g).map(function (transition) {\n      var values = transition.split(' '); // Property is always defined first\n\n      values[0] = propertiesToConvert[values[0]] || values[0];\n      return values.join(' ');\n    }).join(', ');\n  },\n  transitionProperty: function transitionProperty(_ref10) {\n    var value = _ref10.value,\n        propertiesToConvert = _ref10.propertiesToConvert;\n    return value.split(/,\\s*/g).map(function (prop) {\n      return propertiesToConvert[prop] || prop;\n    }).join(', ');\n  },\n  transform: function transform(_ref11) {\n    var value = _ref11.value;\n    // This was copied and modified from CSSJanus:\n    // https://github.com/cssjanus/cssjanus/blob/4a40f001b1ba35567112d8b8e1d9d95eda4234c3/src/cssjanus.js#L152-L153\n    var nonAsciiPattern = \"[^\\\\u0020-\\\\u007e]\";\n    var escapePattern = \"(?:\" + '(?:(?:\\\\[0-9a-f]{1,6})(?:\\\\r\\\\n|\\\\s)?)' + \"|\\\\\\\\[^\\\\r\\\\n\\\\f0-9a-f])\";\n    var signedQuantPattern = \"((?:-?\" + ('(?:[0-9]*\\\\.[0-9]+|[0-9]+)' + \"(?:\\\\s*\" + '(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)' + \"|\" + (\"-?\" + (\"(?:[_a-z]|\" + nonAsciiPattern + \"|\" + escapePattern + \")\") + (\"(?:[_a-z0-9-]|\" + nonAsciiPattern + \"|\" + escapePattern + \")\") + \"*\") + \")?\") + \")|(?:inherit|auto))\";\n    var translateXRegExp = new RegExp(\"(translateX\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"(\\\\s*\\\\))\", 'gi');\n    var translateRegExp = new RegExp(\"(translate\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"((?:\\\\s*,\\\\s*\" + signedQuantPattern + \"){0,1}\\\\s*\\\\))\", 'gi');\n    var translate3dRegExp = new RegExp(\"(translate3d\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"((?:\\\\s*,\\\\s*\" + signedQuantPattern + \"){0,2}\\\\s*\\\\))\", 'gi');\n    var rotateRegExp = new RegExp(\"(rotate[ZY]?\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"(\\\\s*\\\\))\", 'gi');\n    return value.replace(translateXRegExp, flipTransformSign).replace(translateRegExp, flipTransformSign).replace(translate3dRegExp, flipTransformSign).replace(rotateRegExp, flipTransformSign);\n  }\n};\npropertyValueConverters.objectPosition = propertyValueConverters.backgroundPosition;\npropertyValueConverters.margin = propertyValueConverters.padding;\npropertyValueConverters.borderWidth = propertyValueConverters.padding;\npropertyValueConverters.boxShadow = propertyValueConverters.textShadow;\npropertyValueConverters.webkitBoxShadow = propertyValueConverters.boxShadow;\npropertyValueConverters.mozBoxShadow = propertyValueConverters.boxShadow;\npropertyValueConverters.WebkitBoxShadow = propertyValueConverters.boxShadow;\npropertyValueConverters.MozBoxShadow = propertyValueConverters.boxShadow;\npropertyValueConverters.borderStyle = propertyValueConverters.borderColor;\npropertyValueConverters.webkitTransform = propertyValueConverters.transform;\npropertyValueConverters.mozTransform = propertyValueConverters.transform;\npropertyValueConverters.WebkitTransform = propertyValueConverters.transform;\npropertyValueConverters.MozTransform = propertyValueConverters.transform;\npropertyValueConverters.transformOrigin = propertyValueConverters.backgroundPosition;\npropertyValueConverters.webkitTransformOrigin = propertyValueConverters.transformOrigin;\npropertyValueConverters.mozTransformOrigin = propertyValueConverters.transformOrigin;\npropertyValueConverters.WebkitTransformOrigin = propertyValueConverters.transformOrigin;\npropertyValueConverters.MozTransformOrigin = propertyValueConverters.transformOrigin;\npropertyValueConverters.webkitTransition = propertyValueConverters.transition;\npropertyValueConverters.mozTransition = propertyValueConverters.transition;\npropertyValueConverters.WebkitTransition = propertyValueConverters.transition;\npropertyValueConverters.MozTransition = propertyValueConverters.transition;\npropertyValueConverters.webkitTransitionProperty = propertyValueConverters.transitionProperty;\npropertyValueConverters.mozTransitionProperty = propertyValueConverters.transitionProperty;\npropertyValueConverters.WebkitTransitionProperty = propertyValueConverters.transitionProperty;\npropertyValueConverters.MozTransitionProperty = propertyValueConverters.transitionProperty; // kebab-case versions\n\npropertyValueConverters['text-shadow'] = propertyValueConverters.textShadow;\npropertyValueConverters['border-color'] = propertyValueConverters.borderColor;\npropertyValueConverters['border-radius'] = propertyValueConverters.borderRadius;\npropertyValueConverters['background-image'] = propertyValueConverters.backgroundImage;\npropertyValueConverters['background-position'] = propertyValueConverters.backgroundPosition;\npropertyValueConverters['background-position-x'] = propertyValueConverters.backgroundPositionX;\npropertyValueConverters['object-position'] = propertyValueConverters.objectPosition;\npropertyValueConverters['border-width'] = propertyValueConverters.padding;\npropertyValueConverters['box-shadow'] = propertyValueConverters.textShadow;\npropertyValueConverters['-webkit-box-shadow'] = propertyValueConverters.textShadow;\npropertyValueConverters['-moz-box-shadow'] = propertyValueConverters.textShadow;\npropertyValueConverters['border-style'] = propertyValueConverters.borderColor;\npropertyValueConverters['-webkit-transform'] = propertyValueConverters.transform;\npropertyValueConverters['-moz-transform'] = propertyValueConverters.transform;\npropertyValueConverters['transform-origin'] = propertyValueConverters.transformOrigin;\npropertyValueConverters['-webkit-transform-origin'] = propertyValueConverters.transformOrigin;\npropertyValueConverters['-moz-transform-origin'] = propertyValueConverters.transformOrigin;\npropertyValueConverters['-webkit-transition'] = propertyValueConverters.transition;\npropertyValueConverters['-moz-transition'] = propertyValueConverters.transition;\npropertyValueConverters['transition-property'] = propertyValueConverters.transitionProperty;\npropertyValueConverters['-webkit-transition-property'] = propertyValueConverters.transitionProperty;\npropertyValueConverters['-moz-transition-property'] = propertyValueConverters.transitionProperty;\n\nvar propertiesToConvert = arrayToObject([['paddingLeft', 'paddingRight'], ['marginLeft', 'marginRight'], ['left', 'right'], ['borderLeft', 'borderRight'], ['borderLeftColor', 'borderRightColor'], ['borderLeftStyle', 'borderRightStyle'], ['borderLeftWidth', 'borderRightWidth'], ['borderTopLeftRadius', 'borderTopRightRadius'], ['borderBottomLeftRadius', 'borderBottomRightRadius'], // kebab-case versions\n['padding-left', 'padding-right'], ['margin-left', 'margin-right'], ['border-left', 'border-right'], ['border-left-color', 'border-right-color'], ['border-left-style', 'border-right-style'], ['border-left-width', 'border-right-width'], ['border-top-left-radius', 'border-top-right-radius'], ['border-bottom-left-radius', 'border-bottom-right-radius']]);\nvar propsToIgnore = ['content']; // this is the same as the propertiesToConvert except for values\n\nvar valuesToConvert = arrayToObject([['ltr', 'rtl'], ['left', 'right'], ['w-resize', 'e-resize'], ['sw-resize', 'se-resize'], ['nw-resize', 'ne-resize']]); // Sorry for the regex üòû, but basically thisis used to replace _every_ instance of\n// `ltr`, `rtl`, `right`, and `left` in `backgroundimage` with the corresponding opposite.\n// A situation we're accepting here:\n// url('/left/right/rtl/ltr.png') will be changed to url('/right/left/ltr/rtl.png')\n// Definite trade-offs here, but I think it's a good call.\n\nvar bgImgDirectionRegex = new RegExp('(^|\\\\W|_)((ltr)|(rtl)|(left)|(right))(\\\\W|_|$)', 'g');\nvar bgPosDirectionRegex = new RegExp('(left)|(right)');\n/**\n * converts properties and values in the CSS in JS object to their corresponding RTL values\n * @param {Object} object the CSS in JS object\n * @return {Object} the RTL converted object\n */\n\nfunction convert(object) {\n  return Object.keys(object).reduce(function (newObj, originalKey) {\n    var originalValue = object[originalKey];\n\n    if (isString(originalValue)) {\n      // you're welcome to later code üò∫\n      originalValue = originalValue.trim();\n    } // Some properties should never be transformed\n\n\n    if (includes(propsToIgnore, originalKey)) {\n      newObj[originalKey] = originalValue;\n      return newObj;\n    }\n\n    var _convertProperty = convertProperty(originalKey, originalValue),\n        key = _convertProperty.key,\n        value = _convertProperty.value;\n\n    newObj[key] = value;\n    return newObj;\n  }, Array.isArray(object) ? [] : {});\n}\n/**\n * Converts a property and its value to the corresponding RTL key and value\n * @param {String} originalKey the original property key\n * @param {Number|String|Object} originalValue the original css property value\n * @return {Object} the new {key, value} pair\n */\n\nfunction convertProperty(originalKey, originalValue) {\n  var isNoFlip = /\\/\\*\\s?@noflip\\s?\\*\\//.test(originalValue);\n  var key = isNoFlip ? originalKey : getPropertyDoppelganger(originalKey);\n  var value = isNoFlip ? originalValue : getValueDoppelganger(key, originalValue);\n  return {\n    key: key,\n    value: value\n  };\n}\n/**\n * This gets the RTL version of the given property if it has a corresponding RTL property\n * @param {String} property the name of the property\n * @return {String} the name of the RTL property\n */\n\nfunction getPropertyDoppelganger(property) {\n  return propertiesToConvert[property] || property;\n}\n/**\n * This converts the given value to the RTL version of that value based on the key\n * @param {String} key this is the key (note: this should be the RTL version of the originalKey)\n * @param {String|Number|Object} originalValue the original css property value. If it's an object, then we'll convert that as well\n * @return {String|Number|Object} the converted value\n */\n\nfunction getValueDoppelganger(key, originalValue) {\n  /* eslint complexity:[2, 10] */\n  // let's try to keep the complexity down... If we have to do this much more, let's break this up\n  if (isNullOrUndefined(originalValue) || isBoolean(originalValue)) {\n    return originalValue;\n  }\n\n  if (isObject(originalValue)) {\n    return convert(originalValue); // recurssion üåÄ\n  }\n\n  var isNum = isNumber(originalValue);\n  var isFunc = isFunction(originalValue);\n  var importantlessValue = isNum || isFunc ? originalValue : originalValue.replace(/ !important.*?$/, '');\n  var isImportant = !isNum && importantlessValue.length !== originalValue.length;\n  var valueConverter = propertyValueConverters[key];\n  var newValue;\n\n  if (valueConverter) {\n    newValue = valueConverter({\n      value: importantlessValue,\n      valuesToConvert: valuesToConvert,\n      propertiesToConvert: propertiesToConvert,\n      isRtl: true,\n      bgImgDirectionRegex: bgImgDirectionRegex,\n      bgPosDirectionRegex: bgPosDirectionRegex\n    });\n  } else {\n    newValue = valuesToConvert[importantlessValue] || importantlessValue;\n  }\n\n  if (isImportant) {\n    return newValue + \" !important\";\n  }\n\n  return newValue;\n}\n\nexport { propertiesToConvert as a, propsToIgnore as b, convert as c, convertProperty as d, getValueDoppelganger as e, arrayToObject as f, getPropertyDoppelganger as g, calculateNewBackgroundPosition as h, flipTransformSign as i, flipSign as j, handleQuartetValues as k, includes as l, isBoolean as m, isFunction as n, isNullOrUndefined as o, propertyValueConverters as p, isNumber as q, isObject as r, isString as s, getValuesAsList as t, valuesToConvert as v };\n"]},"metadata":{},"sourceType":"module"}